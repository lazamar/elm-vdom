// Generated by purs bundle 0.11.7
var PS = {};
(function(exports) {
    "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["Semigroupoid"] = Semigroupoid;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Category = function (Semigroupoid0, id) {
      this.Semigroupoid0 = Semigroupoid0;
      this.id = id;
  };
  var id = function (dict) {
      return dict.id;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["id"] = id;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];        
  var on = function (f) {
      return function (g) {
          return function (x) {
              return function (y) {
                  return f(g(x))(g(y));
              };
          };
      };
  };
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
  exports["on"] = on;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
    "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
      function (c, i) {
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Show"];     
  var Show = function (show) {
      this.show = show;
  };
  var showString = new Show($foreign.showStringImpl);
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showString"] = showString;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
    "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
  exports["semigroupArray"] = semigroupArray;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Functor = PS["Data.Functor"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var Alt = function (Functor0, alt) {
      this.Functor0 = Functor0;
      this.alt = alt;
  };                                                       
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
})(PS["Control.Alt"] = PS["Control.Alt"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var Discard = function (discard) {
      this.discard = discard;
  };
  var discard = function (dict) {
      return dict.discard;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var composeKleisliFlipped = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bindFlipped(dictBind)(f)(g(a));
              };
          };
      };
  };
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["Discard"] = Discard;
  exports["discard"] = discard;
  exports["composeKleisliFlipped"] = composeKleisliFlipped;
  exports["discardUnit"] = discardUnit;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
  /* globals setImmediate, clearImmediate, setTimeout, clearTimeout */
  /* jshint -W083, -W098, -W003 */
  "use strict";

  var Aff = function () {
    // A unique value for empty.
    var EMPTY = {};

    /*

  An awkward approximation. We elide evidence we would otherwise need in PS for
  efficiency sake.

  data Aff eff a
    = Pure a
    | Throw Error
    | Catch (Aff eff a) (Error -> Aff eff a)
    | Sync (Eff eff a)
    | Async ((Either Error a -> Eff eff Unit) -> Eff eff (Canceler eff))
    | forall b. Bind (Aff eff b) (b -> Aff eff a)
    | forall b. Bracket (Aff eff b) (BracketConditions eff b) (b -> Aff eff a)
    | forall b. Fork Boolean (Aff eff b) ?(Fiber eff b -> a)
    | Sequential (ParAff aff a)

  */  
    var PURE    = "Pure";
    var THROW   = "Throw";
    var CATCH   = "Catch";
    var SYNC    = "Sync";
    var ASYNC   = "Async";
    var BIND    = "Bind";
    var BRACKET = "Bracket";
    var FORK    = "Fork";
    var SEQ     = "Sequential";

    /*

  data ParAff eff a
    = forall b. Map (b -> a) (ParAff eff b)
    | forall b. Apply (ParAff eff (b -> a)) (ParAff eff b)
    | Alt (ParAff eff a) (ParAff eff a)
    | ?Par (Aff eff a)

  */  
    var MAP   = "Map";
    var APPLY = "Apply";
    var ALT   = "Alt";

    // Various constructors used in interpretation
    var CONS      = "Cons";      // Cons-list, for stacks
    var RESUME    = "Resume";    // Continue indiscriminately
    var RELEASE   = "Release";   // Continue with bracket finalizers
    var FINALIZER = "Finalizer"; // A non-interruptible effect
    var FINALIZED = "Finalized"; // Marker for finalization
    var FORKED    = "Forked";    // Reference to a forked fiber, with resumption stack
    var FIBER     = "Fiber";     // Actual fiber reference
    var THUNK     = "Thunk";     // Primed effect, ready to invoke

    function Aff(tag, _1, _2, _3) {
      this.tag = tag;
      this._1  = _1;
      this._2  = _2;
      this._3  = _3;
    }

    function AffCtr(tag) {
      var fn = function (_1, _2, _3) {
        return new Aff(tag, _1, _2, _3);
      };
      fn.tag = tag;
      return fn;
    }

    function nonCanceler(error) {
      return new Aff(PURE, void 0);
    }

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    function runSync(left, right, eff) {
      try {
        return right(eff());
      } catch (error) {
        return left(error);
      }
    }

    function runAsync(left, eff, k) {
      try {
        return eff(k)();
      } catch (error) {
        k(left(error))();
        return nonCanceler;
      }
    }

    var Scheduler = function () {
      var limit    = 1024;
      var size     = 0;
      var ix       = 0;
      var queue    = new Array(limit);
      var draining = false;

      function drain() {
        var thunk;
        draining = true;
        while (size !== 0) {
          size--;
          thunk     = queue[ix];
          queue[ix] = void 0;
          ix        = (ix + 1) % limit;
          thunk();
        }
        draining = false;
      }

      return {
        isDraining: function () {
          return draining;
        },
        enqueue: function (cb) {
          var i, tmp;
          if (size === limit) {
            tmp = draining;
            drain();
            draining = tmp;
          }

          queue[(ix + size) % limit] = cb;
          size++;

          if (!draining) {
            drain();
          }
        }
      };
    }();

    function Supervisor(util) {
      var fibers  = {};
      var fiberId = 0;
      var count   = 0;

      return {
        register: function (fiber) {
          var fid = fiberId++;
          fiber.onComplete({
            rethrow: true,
            handler: function (result) {
              return function () {
                count--;
                delete fibers[fid];
              };
            }
          });
          fibers[fid] = fiber;
          count++;
        },
        isEmpty: function () {
          return count === 0;
        },
        killAll: function (killError, cb) {
          return function () {
            var killCount = 0;
            var kills     = {};

            function kill(fid) {
              kills[fid] = fibers[fid].kill(killError, function (result) {
                return function () {
                  delete kills[fid];
                  killCount--;
                  if (util.isLeft(result) && util.fromLeft(result)) {
                    setTimeout(function () {
                      throw util.fromLeft(result);
                    }, 0);
                  }
                  if (killCount === 0) {
                    cb();
                  }
                };
              })();
            }

            for (var k in fibers) {
              if (fibers.hasOwnProperty(k)) {
                killCount++;
                kill(k);
              }
            }

            fibers  = {};
            fiberId = 0;
            count   = 0;

            return function (error) {
              return new Aff(SYNC, function () {
                for (var k in kills) {
                  if (kills.hasOwnProperty(k)) {
                    kills[k]();
                  }
                }
              });
            };
          };
        }
      };
    }

    // Fiber state machine
    var SUSPENDED   = 0; // Suspended, pending a join.
    var CONTINUE    = 1; // Interpret the next instruction.
    var STEP_BIND   = 2; // Apply the next bind.
    var STEP_RESULT = 3; // Handle potential failure from a result.
    var PENDING     = 4; // An async effect is running.
    var RETURN      = 5; // The current stack has returned.
    var COMPLETED   = 6; // The entire fiber has completed.

    function Fiber(util, supervisor, aff) {
      // Monotonically increasing tick, increased on each asynchronous turn.
      var runTick = 0;

      // The current branch of the state machine.
      var status = SUSPENDED;

      // The current point of interest for the state machine branch.
      var step      = aff;  // Successful step
      var fail      = null; // Failure step
      var interrupt = null; // Asynchronous interrupt

      // Stack of continuations for the current fiber.
      var bhead = null;
      var btail = null;

      // Stack of attempts and finalizers for error recovery. Every `Cons` is also
      // tagged with current `interrupt` state. We use this to track which items
      // should be ignored or evaluated as a result of a kill.
      var attempts = null;

      // A special state is needed for Bracket, because it cannot be killed. When
      // we enter a bracket acquisition or finalizer, we increment the counter,
      // and then decrement once complete.
      var bracketCount = 0;

      // Each join gets a new id so they can be revoked.
      var joinId  = 0;
      var joins   = null;
      var rethrow = true;

      // Each invocation of `run` requires a tick. When an asynchronous effect is
      // resolved, we must check that the local tick coincides with the fiber
      // tick before resuming. This prevents multiple async continuations from
      // accidentally resuming the same fiber. A common example may be invoking
      // the provided callback in `makeAff` more than once, but it may also be an
      // async effect resuming after the fiber was already cancelled.
      function run(localRunTick) {
        var tmp, result, attempt, canceler;
        while (true) {
          tmp       = null;
          result    = null;
          attempt   = null;
          canceler  = null;

          switch (status) {
          case STEP_BIND:
            status = CONTINUE;
            step   = bhead(step);
            if (btail === null) {
              bhead = null;
            } else {
              bhead = btail._1;
              btail = btail._2;
            }
            break;

          case STEP_RESULT:
            if (util.isLeft(step)) {
              status = RETURN;
              fail   = step;
              step   = null;
            } else if (bhead === null) {
              status = RETURN;
            } else {
              status = STEP_BIND;
              step   = util.fromRight(step);
            }
            break;

          case CONTINUE:
            switch (step.tag) {
            case BIND:
              if (bhead) {
                btail = new Aff(CONS, bhead, btail);
              }
              bhead  = step._2;
              status = CONTINUE;
              step   = step._1;
              break;

            case PURE:
              if (bhead === null) {
                status = RETURN;
                step   = util.right(step._1);
              } else {
                status = STEP_BIND;
                step   = step._1;
              }
              break;

            case SYNC:
              status = STEP_RESULT;
              step   = runSync(util.left, util.right, step._1);
              break;

            case ASYNC:
              status = PENDING;
              step   = runAsync(util.left, step._1, function (result) {
                return function () {
                  if (runTick !== localRunTick) {
                    return;
                  }
                  runTick++;
                  Scheduler.enqueue(function () {
                    status = STEP_RESULT;
                    step   = result;
                    run(runTick);
                  });
                };
              });
              return;

            case THROW:
              status = RETURN;
              fail   = util.left(step._1);
              step   = null;
              break;

            // Enqueue the Catch so that we can call the error handler later on
            // in case of an exception.
            case CATCH:
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead    = null;
              btail    = null;
              status   = CONTINUE;
              step     = step._1;
              break;

            // Enqueue the Bracket so that we can call the appropriate handlers
            // after resource acquisition.
            case BRACKET:
              bracketCount++;
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead  = null;
              btail  = null;
              status = CONTINUE;
              step   = step._1;
              break;

            case FORK:
              status = STEP_RESULT;
              tmp    = Fiber(util, supervisor, step._2);
              if (supervisor) {
                supervisor.register(tmp);
              }
              if (step._1) {
                tmp.run();
              }
              step = util.right(tmp);
              break;

            case SEQ:
              status = CONTINUE;
              step   = sequential(util, supervisor, step._1);
              break;
            }
            break;

          case RETURN:
            bhead = null;
            btail = null;
            // If the current stack has returned, and we have no other stacks to
            // resume or finalizers to run, the fiber has halted and we can
            // invoke all join callbacks. Otherwise we need to resume.
            if (attempts === null) {
              status = COMPLETED;
              step   = interrupt || fail || step;
            } else {
              // The interrupt status for the enqueued item.
              tmp      = attempts._3;
              attempt  = attempts._1;
              attempts = attempts._2;

              switch (attempt.tag) {
              // We cannot recover from an interrupt. Otherwise we should
              // continue stepping, or run the exception handler if an exception
              // was raised.
              case CATCH:
                // We should compare the interrupt status as well because we
                // only want it to apply if there has been an interrupt since
                // enqueuing the catch.
                if (interrupt && interrupt !== tmp) {
                  status = RETURN;
                } else if (fail) {
                  status = CONTINUE;
                  step   = attempt._2(util.fromLeft(fail));
                  fail   = null;
                }
                break;

              // We cannot resume from an interrupt or exception.
              case RESUME:
                // As with Catch, we only want to ignore in the case of an
                // interrupt since enqueing the item.
                if (interrupt && interrupt !== tmp || fail) {
                  status = RETURN;
                } else {
                  bhead  = attempt._1;
                  btail  = attempt._2;
                  status = STEP_BIND;
                  step   = util.fromRight(step);
                }
                break;

              // If we have a bracket, we should enqueue the handlers,
              // and continue with the success branch only if the fiber has
              // not been interrupted. If the bracket acquisition failed, we
              // should not run either.
              case BRACKET:
                bracketCount--;
                if (fail === null) {
                  result   = util.fromRight(step);
                  // We need to enqueue the Release with the same interrupt
                  // status as the Bracket that is initiating it.
                  attempts = new Aff(CONS, new Aff(RELEASE, attempt._2, result), attempts, tmp);
                  // We should only coninue as long as the interrupt status has not changed or
                  // we are currently within a non-interruptable finalizer.
                  if (interrupt === tmp || bracketCount > 0) {
                    status = CONTINUE;
                    step   = attempt._3(result);
                  }
                }
                break;

              // Enqueue the appropriate handler. We increase the bracket count
              // because it should not be cancelled.
              case RELEASE:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step), attempts, interrupt);
                status   = CONTINUE;
                // It has only been killed if the interrupt status has changed
                // since we enqueued the item.
                if (interrupt && interrupt !== tmp) {
                  step = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                } else if (fail) {
                  step = attempt._1.failed(util.fromLeft(fail))(attempt._2);
                } else {
                  step = attempt._1.completed(util.fromRight(step))(attempt._2);
                }
                break;

              case FINALIZER:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step), attempts, interrupt);
                status   = CONTINUE;
                step     = attempt._1;
                break;

              case FINALIZED:
                bracketCount--;
                status = RETURN;
                step   = attempt._1;
                break;
              }
            }
            break;

          case COMPLETED:
            for (var k in joins) {
              if (joins.hasOwnProperty(k)) {
                rethrow = rethrow && joins[k].rethrow;
                runEff(joins[k].handler(step));
              }
            }
            joins = null;
            // If we have an interrupt and a fail, then the thread threw while
            // running finalizers. This should always rethrow in a fresh stack.
            if (interrupt && fail) {
              setTimeout(function () {
                throw util.fromLeft(fail);
              }, 0);
            // If we have an unhandled exception, and no other fiber has joined
            // then we need to throw the exception in a fresh stack.
            } else if (util.isLeft(step) && rethrow) {
              setTimeout(function () {
                // Guard on reathrow because a completely synchronous fiber can
                // still have an observer which was added after-the-fact.
                if (rethrow) {
                  throw util.fromLeft(step);
                }
              }, 0);
            }
            return;
          case SUSPENDED:
            status = CONTINUE;
            break;
          case PENDING: return;
          }
        }
      }

      function onComplete(join) {
        return function () {
          if (status === COMPLETED) {
            rethrow = rethrow && join.rethrow;
            join.handler(step)();
            return function () {};
          }

          var jid    = joinId++;
          joins      = joins || {};
          joins[jid] = join;

          return function() {
            if (joins !== null) {
              delete joins[jid];
            }
          };
        };
      }

      function kill(error, cb) {
        return function () {
          if (status === COMPLETED) {
            cb(util.right(void 0))();
            return function () {};
          }

          var canceler = onComplete({
            rethrow: false,
            handler: function (/* unused */) {
              return cb(util.right(void 0));
            }
          })();

          switch (status) {
          case SUSPENDED:
            interrupt = util.left(error);
            status    = COMPLETED;
            step      = interrupt;
            run(runTick);
            break;
          case PENDING:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              if (status === PENDING) {
                attempts = new Aff(CONS, new Aff(FINALIZER, step(error)), attempts, interrupt);
              }
              status   = RETURN;
              step     = null;
              fail     = null;
              run(++runTick);
            }
            break;
          default:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              status = RETURN;
              step   = null;
              fail   = null;
            }
          }

          return canceler;
        };
      }

      function join(cb) {
        return function () {
          var canceler = onComplete({
            rethrow: false,
            handler: cb
          })();
          if (status === SUSPENDED) {
            run(runTick);
          }
          return canceler;
        };
      }

      return {
        kill: kill,
        join: join,
        onComplete: onComplete,
        isSuspended: function () {
          return status === SUSPENDED;
        },
        run: function () {
          if (status === SUSPENDED) {
            if (!Scheduler.isDraining()) {
              Scheduler.enqueue(function () {
                run(runTick);
              });
            } else {
              run(runTick);
            }
          }
        }
      };
    }

    function runPar(util, supervisor, par, cb) {
      // Table of all forked fibers.
      var fiberId   = 0;
      var fibers    = {};

      // Table of currently running cancelers, as a product of `Alt` behavior.
      var killId    = 0;
      var kills     = {};

      // Error used for early cancelation on Alt branches.
      var early     = new Error("[ParAff] Early exit");

      // Error used to kill the entire tree.
      var interrupt = null;

      // The root pointer of the tree.
      var root      = EMPTY;

      // Walks a tree, invoking all the cancelers. Returns the table of pending
      // cancellation fibers.
      function kill(error, par, cb) {
        var step  = par;
        var head  = null;
        var tail  = null;
        var count = 0;
        var kills = {};
        var tmp, kid;

        loop: while (true) {
          tmp = null;

          switch (step.tag) {
          case FORKED:
            if (step._3 === EMPTY) {
              tmp = fibers[step._1];
              kills[count++] = tmp.kill(error, function (result) {
                return function () {
                  count--;
                  if (count === 0) {
                    cb(result)();
                  }
                };
              });
            }
            // Terminal case.
            if (head === null) {
              break loop;
            }
            // Go down the right side of the tree.
            step = head._2;
            if (tail === null) {
              head = null;
            } else {
              head = tail._1;
              tail = tail._2;
            }
            break;
          case MAP:
            step = step._2;
            break;
          case APPLY:
          case ALT:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = step;
            step = step._1;
            break;
          }
        }

        if (count === 0) {
          cb(util.right(void 0))();
        } else {
          // Run the cancelation effects. We alias `count` because it's mutable.
          kid = 0;
          tmp = count;
          for (; kid < tmp; kid++) {
            kills[kid] = kills[kid]();
          }
        }

        return kills;
      }

      // When a fiber resolves, we need to bubble back up the tree with the
      // result, computing the applicative nodes.
      function join(result, head, tail) {
        var fail, step, lhs, rhs, tmp, kid;

        if (util.isLeft(result)) {
          fail = result;
          step = null;
        } else {
          step = result;
          fail = null;
        }

        loop: while (true) {
          lhs = null;
          rhs = null;
          tmp = null;
          kid = null;

          // We should never continue if the entire tree has been interrupted.
          if (interrupt !== null) {
            return;
          }

          // We've made it all the way to the root of the tree, which means
          // the tree has fully evaluated.
          if (head === null) {
            cb(fail || step)();
            return;
          }

          // The tree has already been computed, so we shouldn't try to do it
          // again. This should never happen.
          // TODO: Remove this?
          if (head._3 !== EMPTY) {
            return;
          }

          switch (head.tag) {
          case MAP:
            if (fail === null) {
              head._3 = util.right(head._1(util.fromRight(step)));
              step    = head._3;
            } else {
              head._3 = fail;
            }
            break;
          case APPLY:
            lhs = head._1._3;
            rhs = head._2._3;
            // If we have a failure we should kill the other side because we
            // can't possible yield a result anymore.
            if (fail) {
              head._3 = fail;
              tmp     = true;
              kid     = killId++;

              kills[kid] = kill(early, fail === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            } else if (lhs === EMPTY || rhs === EMPTY) {
              // We can only proceed if both sides have resolved.
              return;
            } else {
              step    = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
              head._3 = step;
            }
            break;
          case ALT:
            lhs = head._1._3;
            rhs = head._2._3;
            // We can only proceed if both have resolved or we have a success
            if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
              return;
            }
            // If both sides resolve with an error, we should continue with the
            // first error
            if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
              fail    = step === lhs ? rhs : lhs;
              step    = null;
              head._3 = fail;
            } else {
              head._3 = step;
              tmp     = true;
              kid     = killId++;
              // Once a side has resolved, we need to cancel the side that is still
              // pending before we can continue.
              kills[kid] = kill(early, step === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            }
            break;
          }

          if (tail === null) {
            head = null;
          } else {
            head = tail._1;
            tail = tail._2;
          }
        }
      }

      function resolve(fiber) {
        return function (result) {
          return function () {
            delete fibers[fiber._1];
            fiber._3 = result;
            join(result, fiber._2._1, fiber._2._2);
          };
        };
      }

      // Walks the applicative tree, substituting non-applicative nodes with
      // `FORKED` nodes. In this tree, all applicative nodes use the `_3` slot
      // as a mutable slot for memoization. In an unresolved state, the `_3`
      // slot is `EMPTY`. In the cases of `ALT` and `APPLY`, we always walk
      // the left side first, because both operations are left-associative. As
      // we `RETURN` from those branches, we then walk the right side.
      function run() {
        var status = CONTINUE;
        var step   = par;
        var head   = null;
        var tail   = null;
        var tmp, fid;

        loop: while (true) {
          tmp = null;
          fid = null;

          switch (status) {
          case CONTINUE:
            switch (step.tag) {
            case MAP:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(MAP, step._1, EMPTY, EMPTY);
              step = step._2;
              break;
            case APPLY:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(APPLY, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            case ALT:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(ALT, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            default:
              // When we hit a leaf value, we suspend the stack in the `FORKED`.
              // When the fiber resolves, it can bubble back up the tree.
              fid    = fiberId++;
              status = RETURN;
              tmp    = step;
              step   = new Aff(FORKED, fid, new Aff(CONS, head, tail), EMPTY);
              tmp    = Fiber(util, supervisor, tmp);
              tmp.onComplete({
                rethrow: false,
                handler: resolve(step)
              })();
              fibers[fid] = tmp;
              if (supervisor) {
                supervisor.register(tmp);
              }
            }
            break;
          case RETURN:
            // Terminal case, we are back at the root.
            if (head === null) {
              break loop;
            }
            // If we are done with the right side, we need to continue down the
            // left. Otherwise we should continue up the stack.
            if (head._1 === EMPTY) {
              head._1 = step;
              status  = CONTINUE;
              step    = head._2;
              head._2 = EMPTY;
            } else {
              head._2 = step;
              step    = head;
              if (tail === null) {
                head  = null;
              } else {
                head  = tail._1;
                tail  = tail._2;
              }
            }
          }
        }

        // Keep a reference to the tree root so it can be cancelled.
        root = step;

        for (fid = 0; fid < fiberId; fid++) {
          fibers[fid].run();
        }
      }

      // Cancels the entire tree. If there are already subtrees being canceled,
      // we need to first cancel those joins. We will then add fresh joins for
      // all pending branches including those that were in the process of being
      // canceled.
      function cancel(error, cb) {
        interrupt = util.left(error);
        var innerKills;
        for (var kid in kills) {
          if (kills.hasOwnProperty(kid)) {
            innerKills = kills[kid];
            for (kid in innerKills) {
              if (innerKills.hasOwnProperty(kid)) {
                innerKills[kid]();
              }
            }
          }
        }

        kills = null;
        var newKills = kill(error, root, cb);

        return function (killError) {
          return new Aff(ASYNC, function (killCb) {
            return function () {
              for (var kid in newKills) {
                if (newKills.hasOwnProperty(kid)) {
                  newKills[kid]();
                }
              }
              return nonCanceler;
            };
          });
        };
      }

      run();

      return function (killError) {
        return new Aff(ASYNC, function (killCb) {
          return function () {
            return cancel(killError, killCb);
          };
        });
      };
    }

    function sequential(util, supervisor, par) {
      return new Aff(ASYNC, function (cb) {
        return function () {
          return runPar(util, supervisor, par, cb);
        };
      });
    }

    Aff.EMPTY       = EMPTY;
    Aff.Pure        = AffCtr(PURE);
    Aff.Throw       = AffCtr(THROW);
    Aff.Catch       = AffCtr(CATCH);
    Aff.Sync        = AffCtr(SYNC);
    Aff.Async       = AffCtr(ASYNC);
    Aff.Bind        = AffCtr(BIND);
    Aff.Bracket     = AffCtr(BRACKET);
    Aff.Fork        = AffCtr(FORK);
    Aff.Seq         = AffCtr(SEQ);
    Aff.ParMap      = AffCtr(MAP);
    Aff.ParApply    = AffCtr(APPLY);
    Aff.ParAlt      = AffCtr(ALT);
    Aff.Fiber       = Fiber;
    Aff.Supervisor  = Supervisor;
    Aff.Scheduler   = Scheduler;
    Aff.nonCanceler = nonCanceler;

    return Aff;
  }();

  exports._pure = Aff.Pure;

  exports._throwError = Aff.Throw;

  exports._catchError = function (aff) {
    return function (k) {
      return Aff.Catch(aff, k);
    };
  };

  exports._map = function (f) {
    return function (aff) {
      if (aff.tag === Aff.Pure.tag) {
        return Aff.Pure(f(aff._1));
      } else {
        return Aff.Bind(aff, function (value) {
          return Aff.Pure(f(value));
        });
      }
    };
  };

  exports._bind = function (aff) {
    return function (k) {
      return Aff.Bind(aff, k);
    };
  };

  exports._liftEff = Aff.Sync;

  exports.makeAff = Aff.Async;

  exports._makeFiber = function (util, aff) {
    return function () {
      return Aff.Fiber(util, null, aff);
    };
  };
})(PS["Control.Monad.Aff"] = PS["Control.Monad.Aff"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
    "use strict";

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Eq = function (eq) {
      this.eq = eq;
  }; 
  var eqString = new Eq($foreign.refEq);
  var eq = function (dict) {
      return dict.eq;
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["eqString"] = eqString;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };                 
  var monoidString = new Monoid(function () {
      return Data_Semigroup.semigroupString;
  }, "");                    
  var monoidArray = new Monoid(function () {
      return Data_Semigroup.semigroupArray;
  }, [  ]);
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidString"] = monoidString;
  exports["monoidArray"] = monoidArray;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];        
  var MonadEff = function (Monad0, liftEff) {
      this.Monad0 = Monad0;
      this.liftEff = liftEff;
  };
  var monadEffEff = new MonadEff(function () {
      return Control_Monad_Eff.monadEff;
  }, Control_Category.id(Control_Category.categoryFn));
  var liftEff = function (dict) {
      return dict.liftEff;
  };
  exports["liftEff"] = liftEff;
  exports["MonadEff"] = MonadEff;
  exports["monadEffEff"] = monadEffEff;
})(PS["Control.Monad.Eff.Class"] = PS["Control.Monad.Eff.Class"] || {});
(function(exports) {
    "use strict";

  exports.showErrorImpl = function (err) {
    return err.stack || err.toString();
  };

  exports.error = function (msg) {
    return new Error(msg);
  };
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Data_Functor = PS["Data.Functor"];        
  var Plus = function (Alt0, empty) {
      this.Alt0 = Alt0;
      this.empty = empty;
  };       
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
})(PS["Control.Plus"] = PS["Control.Plus"] || {});
(function(exports) {
    "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.HeytingAlgebra"];
  var Data_Unit = PS["Data.Unit"];        
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var implies = function (dict) {
      return dict.implies;
  };                 
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  exports["HeytingAlgebra"] = HeytingAlgebra;
  exports["tt"] = tt;
  exports["ff"] = ff;
  exports["implies"] = implies;
  exports["conj"] = conj;
  exports["disj"] = disj;
  exports["not"] = not;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 219, column 1 - line 219, column 51: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };                                                      
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["functorMaybe"] = functorMaybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Prelude = PS["Prelude"];        
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };
  var alaF = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return function (f) {
                          return function ($64) {
                              return Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1))(f(Data_Functor.map(dictFunctor)(wrap(dictNewtype))($64)));
                          };
                      };
                  };
              };
          };
      };
  };
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
  exports["Newtype"] = Newtype;
  exports["alaF"] = alaF;
})(PS["Data.Newtype"] = PS["Data.Newtype"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Disj = function (x) {
      return x;
  };
  var semigroupDisj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var newtypeDisj = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Disj);
  var monoidDisj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
  };
  exports["Disj"] = Disj;
  exports["newtypeDisj"] = newtypeDisj;
  exports["semigroupDisj"] = semigroupDisj;
  exports["monoidDisj"] = monoidDisj;
})(PS["Data.Monoid.Disj"] = PS["Data.Monoid.Disj"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false,
                                  acc: x
                              };
                          };
                          return {
                              init: false,
                              acc: Data_Semigroup.append(dictMonoid.Semigroup0())(v.acc)(Data_Semigroup.append(dictMonoid.Semigroup0())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true,
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var any = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Monoid_Disj.newtypeDisj)(Data_Monoid_Disj.newtypeDisj)(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
      };
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["intercalate"] = intercalate;
  exports["any"] = any;
  exports["foldableArray"] = foldableArray;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];        
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Left) {
              return new Left(v1.value0);
          };
          if (v1 instanceof Right) {
              return new Right(v(v1.value0));
          };
          throw new Error("Failed pattern match at Data.Either line 36, column 1 - line 36, column 45: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 229, column 1 - line 229, column 64: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["functorEither"] = functorEither;
})(PS["Data.Either"] = PS["Data.Either"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Exception"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                                                     
  var showError = new Data_Show.Show($foreign.showErrorImpl);
  exports["showError"] = showError;
  exports["error"] = $foreign.error;
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var MonadThrow = function (Monad0, throwError) {
      this.Monad0 = Monad0;
      this.throwError = throwError;
  };
  var MonadError = function (MonadThrow0, catchError) {
      this.MonadThrow0 = MonadThrow0;
      this.catchError = catchError;
  };
  var throwError = function (dict) {
      return dict.throwError;
  }; 
  var catchError = function (dict) {
      return dict.catchError;
  };
  var $$try = function (dictMonadError) {
      return function (a) {
          return catchError(dictMonadError)(Data_Functor.map(((((dictMonadError.MonadThrow0()).Monad0()).Bind1()).Apply0()).Functor0())(Data_Either.Right.create)(a))(function ($21) {
              return Control_Applicative.pure(((dictMonadError.MonadThrow0()).Monad0()).Applicative0())(Data_Either.Left.create($21));
          });
      };
  };
  exports["catchError"] = catchError;
  exports["throwError"] = throwError;
  exports["MonadThrow"] = MonadThrow;
  exports["MonadError"] = MonadError;
  exports["try"] = $$try;
})(PS["Control.Monad.Error.Class"] = PS["Control.Monad.Error.Class"] || {});
(function(exports) {
    "use strict";

  // module Partial.Unsafe

  exports.unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
    "use strict";

  // module Partial

  exports.crashWith = function () {
    return function (msg) {
      throw new Error(msg);
    };
  };
})(PS["Partial"] = PS["Partial"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Partial"];
  exports["crashWith"] = $foreign.crashWith;
})(PS["Partial"] = PS["Partial"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Partial.Unsafe"];
  var Partial = PS["Partial"];
  var unsafeCrashWith = function (msg) {
      return $foreign.unsafePartial(function (dictPartial) {
          return Partial.crashWith(dictPartial)(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Aff"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Parallel = PS["Control.Parallel"];
  var Control_Parallel_Class = PS["Control.Parallel.Class"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];                          
  var functorAff = new Data_Functor.Functor($foreign._map);
  var ffiUtil = (function () {
      var unsafeFromRight = function (v) {
          if (v instanceof Data_Either.Right) {
              return v.value0;
          };
          if (v instanceof Data_Either.Left) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
          };
          throw new Error("Failed pattern match at Control.Monad.Aff line 402, column 21 - line 404, column 31: " + [ v.constructor.name ]);
      };
      var unsafeFromLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return v.value0;
          };
          if (v instanceof Data_Either.Right) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
          };
          throw new Error("Failed pattern match at Control.Monad.Aff line 397, column 20 - line 401, column 3: " + [ v.constructor.name ]);
      };
      var isLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return true;
          };
          if (v instanceof Data_Either.Right) {
              return false;
          };
          throw new Error("Failed pattern match at Control.Monad.Aff line 392, column 12 - line 394, column 20: " + [ v.constructor.name ]);
      };
      return {
          isLeft: isLeft,
          fromLeft: unsafeFromLeft,
          fromRight: unsafeFromRight,
          left: Data_Either.Left.create,
          right: Data_Either.Right.create
      };
  })();
  var makeFiber = function (aff) {
      return $foreign._makeFiber(ffiUtil, aff);
  };
  var launchAff = function (aff) {
      return function __do() {
          var v = makeFiber(aff)();
          v.run();
          return v;
      };
  };
  var monadAff = new Control_Monad.Monad(function () {
      return applicativeAff;
  }, function () {
      return bindAff;
  });
  var bindAff = new Control_Bind.Bind(function () {
      return applyAff;
  }, $foreign._bind);
  var applyAff = new Control_Apply.Apply(function () {
      return functorAff;
  }, Control_Monad.ap(monadAff));
  var applicativeAff = new Control_Applicative.Applicative(function () {
      return applyAff;
  }, $foreign._pure);
  var monadEffAff = new Control_Monad_Eff_Class.MonadEff(function () {
      return monadAff;
  }, $foreign._liftEff);
  var monadThrowAff = new Control_Monad_Error_Class.MonadThrow(function () {
      return monadAff;
  }, $foreign._throwError);
  var monadErrorAff = new Control_Monad_Error_Class.MonadError(function () {
      return monadThrowAff;
  }, $foreign._catchError);                                     
  var runAff = function (k) {
      return function (aff) {
          return launchAff(Control_Bind.bindFlipped(bindAff)(function ($52) {
              return Control_Monad_Eff_Class.liftEff(monadEffAff)(k($52));
          })(Control_Monad_Error_Class["try"](monadErrorAff)(aff)));
      };
  };
  var runAff_ = function (k) {
      return function (aff) {
          return Data_Functor["void"](Control_Monad_Eff.functorEff)(runAff(k)(aff));
      };
  };
  var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit));
  exports["launchAff"] = launchAff;
  exports["runAff"] = runAff;
  exports["runAff_"] = runAff_;
  exports["nonCanceler"] = nonCanceler;
  exports["functorAff"] = functorAff;
  exports["applyAff"] = applyAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadAff"] = monadAff;
  exports["monadThrowAff"] = monadThrowAff;
  exports["monadErrorAff"] = monadErrorAff;
  exports["monadEffAff"] = monadEffAff;
  exports["makeAff"] = $foreign.makeAff;
})(PS["Control.Monad.Aff"] = PS["Control.Monad.Aff"] || {});
(function(exports) {
    "use strict";

  exports.mkEffFn1 = function mkEffFn1(fn) {
    return function(x) {
      return fn(x)();
    };
  };

  exports.runEffFn2 = function runEffFn2(fn) {
    return function(a) {
      return function(b) {
        return function() {
          return fn(a, b);
        };
      };
    };
  };

  exports.runEffFn3 = function runEffFn3(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function() {
            return fn(a, b, c);
          };
        };
      };
    };
  };
})(PS["Control.Monad.Eff.Uncurried"] = PS["Control.Monad.Eff.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Uncurried"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["mkEffFn1"] = $foreign.mkEffFn1;
  exports["runEffFn2"] = $foreign.runEffFn2;
  exports["runEffFn3"] = $foreign.runEffFn3;
})(PS["Control.Monad.Eff.Uncurried"] = PS["Control.Monad.Eff.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Uncurried = PS["Control.Monad.Eff.Uncurried"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Prelude = PS["Prelude"];
  var fromEffFnAff = function (v) {
      return Control_Monad_Aff.makeAff(function (k) {
          return function __do() {
              var v1 = Control_Monad_Eff_Uncurried.runEffFn2(v)(Control_Monad_Eff_Uncurried.mkEffFn1(function ($4) {
                  return k(Data_Either.Left.create($4));
              }))(Control_Monad_Eff_Uncurried.mkEffFn1(function ($5) {
                  return k(Data_Either.Right.create($5));
              }))();
              return function (e) {
                  return Control_Monad_Aff.makeAff(function (k2) {
                      return function __do() {
                          Control_Monad_Eff_Uncurried.runEffFn3(v1)(e)(Control_Monad_Eff_Uncurried.mkEffFn1(function ($6) {
                              return k2(Data_Either.Left.create($6));
                          }))(Control_Monad_Eff_Uncurried.mkEffFn1(function ($7) {
                              return k2(Data_Either.Right.create($7));
                          }))();
                          return Control_Monad_Aff.nonCanceler;
                      };
                  });
              };
          };
      });
  };
  exports["fromEffFnAff"] = fromEffFnAff;
})(PS["Control.Monad.Aff.Compat"] = PS["Control.Monad.Aff.Compat"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Prelude = PS["Prelude"];        
  var MonadTrans = function (lift) {
      this.lift = lift;
  };
  var lift = function (dict) {
      return dict.lift;
  };
  exports["lift"] = lift;
  exports["MonadTrans"] = MonadTrans;
})(PS["Control.Monad.Trans.Class"] = PS["Control.Monad.Trans.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Newtype = PS["Data.Newtype"];
  var Prelude = PS["Prelude"];        
  var ContT = function (x) {
      return x;
  };        
  var monadTransContT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function (m) {
          return function (k) {
              return Control_Bind.bind(dictMonad.Bind1())(m)(k);
          };
      };
  });
  var functorContT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return function (k) {
                  return v(function (a) {
                      return k(f(a));
                  });
              };
          };
      });
  };
  var applyContT = function (dictApply) {
      return new Control_Apply.Apply(function () {
          return functorContT(dictApply.Functor0());
      }, function (v) {
          return function (v1) {
              return function (k) {
                  return v(function (g) {
                      return v1(function (a) {
                          return k(g(a));
                      });
                  });
              };
          };
      });
  };
  var bindContT = function (dictBind) {
      return new Control_Bind.Bind(function () {
          return applyContT(dictBind.Apply0());
      }, function (v) {
          return function (k) {
              return function (k$prime) {
                  return v(function (a) {
                      var v1 = k(a);
                      return v1(k$prime);
                  });
              };
          };
      });
  };
  var applicativeContT = function (dictApplicative) {
      return new Control_Applicative.Applicative(function () {
          return applyContT(dictApplicative.Apply0());
      }, function (a) {
          return function (k) {
              return k(a);
          };
      });
  };
  var monadContT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeContT(dictMonad.Applicative0());
      }, function () {
          return bindContT(dictMonad.Bind1());
      });
  };
  var monadEffContT = function (dictMonadEff) {
      return new Control_Monad_Eff_Class.MonadEff(function () {
          return monadContT(dictMonadEff.Monad0());
      }, function ($46) {
          return Control_Monad_Trans_Class.lift(monadTransContT)(dictMonadEff.Monad0())(Control_Monad_Eff_Class.liftEff(dictMonadEff)($46));
      });
  };
  exports["ContT"] = ContT;
  exports["functorContT"] = functorContT;
  exports["applyContT"] = applyContT;
  exports["applicativeContT"] = applicativeContT;
  exports["bindContT"] = bindContT;
  exports["monadContT"] = monadContT;
  exports["monadTransContT"] = monadTransContT;
  exports["monadEffContT"] = monadEffContT;
})(PS["Control.Monad.Cont.Trans"] = PS["Control.Monad.Cont.Trans"] || {});
(function(exports) {
    "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var logShow = function (dictShow) {
      return function (a) {
          return $foreign.log(Data_Show.show(dictShow)(a));
      };
  };
  exports["logShow"] = logShow;
  exports["log"] = $foreign.log;
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Distributive = PS["Data.Distributive"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Type_Equality = PS["Type.Equality"];        
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var snd = function (v) {
      return v.value1;
  };                                                                                                    
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];        
  var ExceptT = function (x) {
      return x;
  };
  var runExceptT = function (v) {
      return v;
  }; 
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
      });
  };
  var monadExceptT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeExceptT(dictMonad);
      }, function () {
          return bindExceptT(dictMonad);
      });
  };
  var bindExceptT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either(function ($97) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Left.create($97));
              })(function (a) {
                  var v1 = k(a);
                  return v1;
              }));
          };
      });
  };
  var applyExceptT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadExceptT(dictMonad)));
  };
  var applicativeExceptT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyExceptT(dictMonad);
      }, function ($98) {
          return ExceptT(Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Right.create($98)));
      });
  };
  var monadThrowExceptT = function (dictMonad) {
      return new Control_Monad_Error_Class.MonadThrow(function () {
          return monadExceptT(dictMonad);
      }, function ($102) {
          return ExceptT(Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Left.create($102)));
      });
  };
  exports["ExceptT"] = ExceptT;
  exports["runExceptT"] = runExceptT;
  exports["mapExceptT"] = mapExceptT;
  exports["functorExceptT"] = functorExceptT;
  exports["applyExceptT"] = applyExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["monadExceptT"] = monadExceptT;
  exports["monadThrowExceptT"] = monadThrowExceptT;
})(PS["Control.Monad.Except.Trans"] = PS["Control.Monad.Except.Trans"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Field = PS["Data.Field"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];        
  var Identity = function (x) {
      return x;
  };
  var newtypeIdentity = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Identity);
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var applyIdentity = new Control_Apply.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Control_Bind.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Control_Applicative.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Control_Monad.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  exports["Identity"] = Identity;
  exports["newtypeIdentity"] = newtypeIdentity;
  exports["functorIdentity"] = functorIdentity;
  exports["applyIdentity"] = applyIdentity;
  exports["applicativeIdentity"] = applicativeIdentity;
  exports["bindIdentity"] = bindIdentity;
  exports["monadIdentity"] = monadIdentity;
})(PS["Data.Identity"] = PS["Data.Identity"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Newtype = PS["Data.Newtype"];
  var Prelude = PS["Prelude"];                                                           
  var runExcept = function ($0) {
      return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(Control_Monad_Except_Trans.runExceptT($0));
  };
  exports["runExcept"] = runExcept;
})(PS["Control.Monad.Except"] = PS["Control.Monad.Except"] || {});
(function(exports) {
    "use strict";

  exports._jsonParser = function (fail, succ, s) {
    try {
      return succ(JSON.parse(s));
    }
    catch (e) {
      return fail(e.message);
    }
  };
})(PS["Data.Argonaut.Parser"] = PS["Data.Argonaut.Parser"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Argonaut.Parser"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Either = PS["Data.Either"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];        
  var jsonParser = function (j) {
      return $foreign._jsonParser(Data_Either.Left.create, Data_Either.Right.create, j);
  };
  exports["jsonParser"] = jsonParser;
})(PS["Data.Argonaut.Parser"] = PS["Data.Argonaut.Parser"] || {});
(function(exports) {
    "use strict";

  exports.snoc = function (l) {
    return function (e) {
      var l1 = l.slice();
      l1.push(e);
      return l1;
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Prelude = PS["Prelude"];        
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var singleton = function (dictPlus) {
      return function (a) {
          return new NonEmpty(a, Control_Plus.empty(dictPlus));
      };
  };
  var showNonEmpty = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              return "(NonEmpty " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
          });
      };
  };
  exports["NonEmpty"] = NonEmpty;
  exports["singleton"] = singleton;
  exports["showNonEmpty"] = showNonEmpty;
})(PS["Data.NonEmpty"] = PS["Data.NonEmpty"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Array"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = PS["Data.Array.ST.Iterator"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  exports["snoc"] = $foreign.snoc;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  exports.toForeign = function (value) {
    return value;
  };

  exports.unsafeFromForeign = function (value) {
    return value;
  };

  exports.tagOf = function (value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  };
})(PS["Data.Foreign"] = PS["Data.Foreign"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];        
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var NonEmptyList = function (x) {
      return x;
  };
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($158) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f($158));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types line 81, column 12 - line 83, column 30: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
          return function ($159) {
              return Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b)(rev($159));
          };
      };
  });
  var functorList = new Data_Functor.Functor(function (f) {
      return Data_Foldable.foldr(foldableList)(function (x) {
          return function (acc) {
              return new Cons(f(x), acc);
          };
      })(Nil.value);
  });
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
      };
  });
  var showList = function (dictShow) {
      return new Data_Show.Show(function (v) {
          if (v instanceof Nil) {
              return "Nil";
          };
          return "(" + (Data_Foldable.intercalate(foldableList)(Data_Monoid.monoidString)(" : ")(Data_Functor.map(functorList)(Data_Show.show(dictShow))(v)) + " : Nil)");
      });
  };
  var showNonEmptyList = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(NonEmptyList " + (Data_Show.show(Data_NonEmpty.showNonEmpty(dictShow)(showList(dictShow)))(v) + ")");
      });
  };                                               
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Data_Semigroup.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, Nil.value);
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["NonEmptyList"] = NonEmptyList;
  exports["showList"] = showList;
  exports["semigroupList"] = semigroupList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["altList"] = altList;
  exports["plusList"] = plusList;
  exports["showNonEmptyList"] = showNonEmptyList;
})(PS["Data.List.Types"] = PS["Data.List.Types"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
  };
  exports["fromFoldable"] = fromFoldable;
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var singleton = function ($160) {
      return Data_List_Types.NonEmptyList(Data_NonEmpty.singleton(Data_List_Types.plusList)($160));
  };
  exports["singleton"] = singleton;
})(PS["Data.List.NonEmpty"] = PS["Data.List.NonEmpty"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Foreign"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Int = PS["Data.Int"];
  var Data_List_NonEmpty = PS["Data.List.NonEmpty"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Prelude = PS["Prelude"];        
  var ForeignError = (function () {
      function ForeignError(value0) {
          this.value0 = value0;
      };
      ForeignError.create = function (value0) {
          return new ForeignError(value0);
      };
      return ForeignError;
  })();
  var TypeMismatch = (function () {
      function TypeMismatch(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeMismatch.create = function (value0) {
          return function (value1) {
              return new TypeMismatch(value0, value1);
          };
      };
      return TypeMismatch;
  })();
  var ErrorAtIndex = (function () {
      function ErrorAtIndex(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtIndex.create = function (value0) {
          return function (value1) {
              return new ErrorAtIndex(value0, value1);
          };
      };
      return ErrorAtIndex;
  })();
  var ErrorAtProperty = (function () {
      function ErrorAtProperty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtProperty.create = function (value0) {
          return function (value1) {
              return new ErrorAtProperty(value0, value1);
          };
      };
      return ErrorAtProperty;
  })();
  var JSONError = (function () {
      function JSONError(value0) {
          this.value0 = value0;
      };
      JSONError.create = function (value0) {
          return new JSONError(value0);
      };
      return JSONError;
  })();
  var showForeignError = new Data_Show.Show(function (v) {
      if (v instanceof ForeignError) {
          return "(ForeignError " + (Data_Show.show(Data_Show.showString)(v.value0) + ")");
      };
      if (v instanceof ErrorAtIndex) {
          return "(ErrorAtIndex " + (Data_Show.show(Data_Show.showInt)(v.value0) + (" " + (Data_Show.show(showForeignError)(v.value1) + ")")));
      };
      if (v instanceof ErrorAtProperty) {
          return "(ErrorAtProperty " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(showForeignError)(v.value1) + ")")));
      };
      if (v instanceof JSONError) {
          return "(JSONError " + (Data_Show.show(Data_Show.showString)(v.value0) + ")");
      };
      if (v instanceof TypeMismatch) {
          return "(TypeMismatch " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(Data_Show.showString)(v.value1) + ")")));
      };
      throw new Error("Failed pattern match at Data.Foreign line 64, column 1 - line 64, column 47: " + [ v.constructor.name ]);
  });
  var fail = function ($121) {
      return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Data_Identity.monadIdentity))(Data_List_NonEmpty.singleton($121));
  };
  var unsafeReadTagged = function (tag) {
      return function (value) {
          if ($foreign.tagOf(value) === tag) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))($foreign.unsafeFromForeign(value));
          };
          if (Data_Boolean.otherwise) {
              return fail(new TypeMismatch(tag, $foreign.tagOf(value)));
          };
          throw new Error("Failed pattern match at Data.Foreign line 104, column 1 - line 104, column 55: " + [ tag.constructor.name, value.constructor.name ]);
      };
  };
  var readString = unsafeReadTagged("String");
  exports["ForeignError"] = ForeignError;
  exports["TypeMismatch"] = TypeMismatch;
  exports["ErrorAtIndex"] = ErrorAtIndex;
  exports["ErrorAtProperty"] = ErrorAtProperty;
  exports["JSONError"] = JSONError;
  exports["unsafeReadTagged"] = unsafeReadTagged;
  exports["readString"] = readString;
  exports["fail"] = fail;
  exports["showForeignError"] = showForeignError;
  exports["toForeign"] = $foreign.toForeign;
})(PS["Data.Foreign"] = PS["Data.Foreign"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var OPTIONS = (function () {
      function OPTIONS() {

      };
      OPTIONS.value = new OPTIONS();
      return OPTIONS;
  })();
  var GET = (function () {
      function GET() {

      };
      GET.value = new GET();
      return GET;
  })();
  var HEAD = (function () {
      function HEAD() {

      };
      HEAD.value = new HEAD();
      return HEAD;
  })();
  var POST = (function () {
      function POST() {

      };
      POST.value = new POST();
      return POST;
  })();
  var PUT = (function () {
      function PUT() {

      };
      PUT.value = new PUT();
      return PUT;
  })();
  var DELETE = (function () {
      function DELETE() {

      };
      DELETE.value = new DELETE();
      return DELETE;
  })();
  var TRACE = (function () {
      function TRACE() {

      };
      TRACE.value = new TRACE();
      return TRACE;
  })();
  var CONNECT = (function () {
      function CONNECT() {

      };
      CONNECT.value = new CONNECT();
      return CONNECT;
  })();
  var PROPFIND = (function () {
      function PROPFIND() {

      };
      PROPFIND.value = new PROPFIND();
      return PROPFIND;
  })();
  var PROPPATCH = (function () {
      function PROPPATCH() {

      };
      PROPPATCH.value = new PROPPATCH();
      return PROPPATCH;
  })();
  var MKCOL = (function () {
      function MKCOL() {

      };
      MKCOL.value = new MKCOL();
      return MKCOL;
  })();
  var COPY = (function () {
      function COPY() {

      };
      COPY.value = new COPY();
      return COPY;
  })();
  var MOVE = (function () {
      function MOVE() {

      };
      MOVE.value = new MOVE();
      return MOVE;
  })();
  var LOCK = (function () {
      function LOCK() {

      };
      LOCK.value = new LOCK();
      return LOCK;
  })();
  var UNLOCK = (function () {
      function UNLOCK() {

      };
      UNLOCK.value = new UNLOCK();
      return UNLOCK;
  })();
  var PATCH = (function () {
      function PATCH() {

      };
      PATCH.value = new PATCH();
      return PATCH;
  })();
  var unCustomMethod = function (v) {
      return v;
  };
  var showMethod = new Data_Show.Show(function (v) {
      if (v instanceof OPTIONS) {
          return "OPTIONS";
      };
      if (v instanceof GET) {
          return "GET";
      };
      if (v instanceof HEAD) {
          return "HEAD";
      };
      if (v instanceof POST) {
          return "POST";
      };
      if (v instanceof PUT) {
          return "PUT";
      };
      if (v instanceof DELETE) {
          return "DELETE";
      };
      if (v instanceof TRACE) {
          return "TRACE";
      };
      if (v instanceof CONNECT) {
          return "CONNECT";
      };
      if (v instanceof PROPFIND) {
          return "PROPFIND";
      };
      if (v instanceof PROPPATCH) {
          return "PROPPATCH";
      };
      if (v instanceof MKCOL) {
          return "MKCOL";
      };
      if (v instanceof COPY) {
          return "COPY";
      };
      if (v instanceof MOVE) {
          return "MOVE";
      };
      if (v instanceof LOCK) {
          return "LOCK";
      };
      if (v instanceof UNLOCK) {
          return "UNLOCK";
      };
      if (v instanceof PATCH) {
          return "PATCH";
      };
      throw new Error("Failed pattern match at Data.HTTP.Method line 42, column 1 - line 42, column 35: " + [ v.constructor.name ]);
  });
  var print = Data_Either.either(Data_Show.show(showMethod))(unCustomMethod);
  exports["OPTIONS"] = OPTIONS;
  exports["GET"] = GET;
  exports["HEAD"] = HEAD;
  exports["POST"] = POST;
  exports["PUT"] = PUT;
  exports["DELETE"] = DELETE;
  exports["TRACE"] = TRACE;
  exports["CONNECT"] = CONNECT;
  exports["PROPFIND"] = PROPFIND;
  exports["PROPPATCH"] = PROPPATCH;
  exports["MKCOL"] = MKCOL;
  exports["COPY"] = COPY;
  exports["MOVE"] = MOVE;
  exports["LOCK"] = LOCK;
  exports["UNLOCK"] = UNLOCK;
  exports["PATCH"] = PATCH;
  exports["unCustomMethod"] = unCustomMethod;
  exports["print"] = print;
  exports["showMethod"] = showMethod;
})(PS["Data.HTTP.Method"] = PS["Data.HTTP.Method"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var MediaType = function (x) {
      return x;
  }; 
  var newtypeMediaType = new Data_Newtype.Newtype(function (n) {
      return n;
  }, MediaType);
  exports["MediaType"] = MediaType;
  exports["newtypeMediaType"] = newtypeMediaType;
})(PS["Data.MediaType"] = PS["Data.MediaType"] || {});
(function(exports) {
    "use strict";

  exports["null"] = null;

  exports.notNull = function (x) {
    return x;
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Nullable"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var toNullable = Data_Maybe.maybe($foreign["null"])($foreign.notNull);
  exports["toNullable"] = toNullable;
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
    "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Cont_Trans = PS["Control.Monad.Cont.Trans"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Prelude = PS["Prelude"];        
  var makeAsync = Control_Monad_Cont_Trans.ContT;
  var fromAff = function (aff) {
      return makeAsync(Data_Function.flip(Control_Monad_Aff.runAff_)(aff));
  };
  exports["makeAsync"] = makeAsync;
  exports["fromAff"] = fromAff;
})(PS["Elm.Async"] = PS["Elm.Async"] || {});
(function(exports) {/* eslint-disable no-use-before-define */

  function F5(fn) {
      return function(a) {
          return function(b) {
              return function(c) {
                  return function(d) {
                      return function(e) {
                          return fn(a, b, c, d, e);
                      };
                  };
              };
          };
      };
  }

  function runOnce(fn) {
      var called = false;
      return function() {
          if (called) {
              return;
          }
          called = true;
          return fn.apply(null, arguments);
      };
  }
  function dispatchCmds(cmds, enqueue) {
      var i;
      var length = cmds.length;
      for (i = 0; i < length; i++) {
          cmds[i](runOnce(enqueue))();
      }
  }

  function program(scheduler, normalRenderer, init, update, view) {
      // -- create renderer --

      return function() {
          var parentNode = document.createElement("div");
          document.body.appendChild(parentNode);

          var initialModel = init.value0;
          var initialCmds = init.value1;

          var renderer = normalRenderer(parentNode, view);
          var updateView = renderer(enqueue, initialModel);
          // ---------------------
          var model = initialModel;

          function onMessage(msg) {
              var tup = update(msg)(model);
              model = tup.value0;
              var cmds = tup.value1;
              updateView(model);
              dispatchCmds(cmds, enqueue);
          }

          var mainProcess = scheduler.spawn(onMessage);
          dispatchCmds(initialCmds, enqueue);

          function enqueue(msg) {
              scheduler.send(mainProcess, msg);
              return function() {};
          }
      };
  }

  exports.program = F5(program);
})(PS["Elm.Native.Platform"] = PS["Elm.Native.Platform"] || {});
(function(exports) {/* eslint-disable no-use-before-define, complexity */

  var scheduler = (function() {
      var working = false;
      var workQueue = [];
      var pid = 0;

      // Maximum number of times that we will run entire updates
      // consecutively. This means that we are propbably in a loop
      var MAX_STEPS = 10000;

      // Create a process
      function spawn(onMessage) {
          var process = {
              id: ++pid,
              onMessage: onMessage,
              messageQueue: []
          };

          return process;
      }

      // Send a msg to a process
      function send(process, msg) {
          process.messageQueue.push(msg);
          enqueue(process);
      }

      function enqueue(msg) {
          workQueue.push(msg);

          if (!working) {
              setTimeout(work, 0);
              working = true;
          }
      }

      function work() {
          var process;
          var steps = 0;

          while (steps < MAX_STEPS && (process = workQueue.shift())) {
              var msg;
              if ((msg = process.messageQueue.shift())) {
                  process.onMessage(msg);
              }
              steps = steps + 1;
          }

          if (!msg) {
              working = false;
              return;
          }
          setTimeout(work, 0);
      }

      return {
          spawn: spawn,
          send: send
      };
  })();

  exports.scheduler = scheduler;
})(PS["Elm.Native.Scheduler"] = PS["Elm.Native.Scheduler"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Elm.Native.Scheduler"];
  exports["scheduler"] = $foreign.scheduler;
})(PS["Elm.Native.Scheduler"] = PS["Elm.Native.Scheduler"] || {});
(function(exports) {/* globals  
    _elm_lang$core$Native_Utils, 
    _elm_lang$core$Json_Decode$map,
    _elm_lang$core$Platform_Cmd$none,
    _elm_lang$core$Platform_Sub$none,
    _elm_lang$core$Native_Platform,
    _elm_lang$core$Native_Scheduler
*/  
  /* eslint-disable no-unused-vars, no-use-before-define, no-redeclare, complexity, max-len */
  // Compiler functions

  function F(arity, fun, wrapper) {
      wrapper.a = arity;
      wrapper.f = fun;
      return wrapper;
  }

  function F2(fun) {
      return F(2, fun, function(a) {
          return function(b) {
              return fun(a, b);
          };
      });
  }
  function F3(fun) {
      return F(3, fun, function(a) {
          return function(b) {
              return function(c) {
                  return fun(a, b, c);
              };
          };
      });
  }
  function F4(fun) {
      return F(4, fun, function(a) {
          return function(b) {
              return function(c) {
                  return function(d) {
                      return fun(a, b, c, d);
                  };
              };
          };
      });
  }
  function F5(fun) {
      return F(5, fun, function(a) {
          return function(b) {
              return function(c) {
                  return function(d) {
                      return function(e) {
                          return fun(a, b, c, d, e);
                      };
                  };
              };
          };
      });
  }
  function F6(fun) {
      return F(6, fun, function(a) {
          return function(b) {
              return function(c) {
                  return function(d) {
                      return function(e) {
                          return function(f) {
                              return fun(a, b, c, d, e, f);
                          };
                      };
                  };
              };
          };
      });
  }
  function F7(fun) {
      return F(7, fun, function(a) {
          return function(b) {
              return function(c) {
                  return function(d) {
                      return function(e) {
                          return function(f) {
                              return function(g) {
                                  return fun(a, b, c, d, e, f, g);
                              };
                          };
                      };
                  };
              };
          };
      });
  }
  function F8(fun) {
      return F(8, fun, function(a) {
          return function(b) {
              return function(c) {
                  return function(d) {
                      return function(e) {
                          return function(f) {
                              return function(g) {
                                  return function(h) {
                                      return fun(a, b, c, d, e, f, g, h);
                                  };
                              };
                          };
                      };
                  };
              };
          };
      });
  }
  function F9(fun) {
      return F(9, fun, function(a) {
          return function(b) {
              return function(c) {
                  return function(d) {
                      return function(e) {
                          return function(f) {
                              return function(g) {
                                  return function(h) {
                                      return function(i) {
                                          return fun(a, b, c, d, e, f, g, h, i);
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      });
  }

  function A2(fun, a, b) {
      return fun.a === 2 ? fun.f(a, b) : fun(a)(b);
  }
  function A3(fun, a, b, c) {
      return fun.a === 3 ? fun.f(a, b, c) : fun(a)(b)(c);
  }
  function A4(fun, a, b, c, d) {
      return fun.a === 4 ? fun.f(a, b, c, d) : fun(a)(b)(c)(d);
  }
  function A5(fun, a, b, c, d, e) {
      return fun.a === 5 ? fun.f(a, b, c, d, e) : fun(a)(b)(c)(d)(e);
  }
  function A6(fun, a, b, c, d, e, f) {
      return fun.a === 6 ? fun.f(a, b, c, d, e, f) : fun(a)(b)(c)(d)(e)(f);
  }
  function A7(fun, a, b, c, d, e, f, g) {
      return fun.a === 7 ? fun.f(a, b, c, d, e, f, g) : fun(a)(b)(c)(d)(e)(f)(g);
  }
  function A8(fun, a, b, c, d, e, f, g, h) {
      return fun.a === 8 ? fun.f(a, b, c, d, e, f, g, h) : fun(a)(b)(c)(d)(e)(f)(g)(h);
  }
  function A9(fun, a, b, c, d, e, f, g, h, i) {
      return fun.a === 9 ? fun.f(a, b, c, d, e, f, g, h, i) : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
  }

  window._elm_lang$core$Native_Core = {
      F2: F2,
      F3: F3,
      F4: F4,
      F5: F5,
      F6: F6,
      F7: F7,
      F8: F8,
      F9: F9,
      A2: A2,
      A3: A3,
      A4: A4,
      A5: A5,
      A6: A6,
      A7: A7,
      A8: A8,
      A9: A9
  };

  // =============================================================
  // VIRTUAL DOM
  // =============================================================

  var _elm_lang$virtual_dom$VirtualDom_Debug$wrap;
  var _elm_lang$virtual_dom$VirtualDom_Debug$wrapWithFlags;

  var _elm_lang$virtual_dom$Native_VirtualDom = (function() {
      var STYLE_KEY = "STYLE";
      var EVENT_KEY = "EVENT";
      var ATTR_KEY = "ATTR";
      var ATTR_NS_KEY = "ATTR_NS";

      var localDoc = typeof document !== "undefined" ? document : {};

      ////////////  VIRTUAL DOM NODES  ////////////

      function text(string) {
          return {
              type: "text",
              text: string
          };
      }

      function node(tag) {
          return F2(function(factList, kidList) {
              return nodeHelp(tag, factList, kidList);
          });
      }

      function nodeHelp(tag, factList, kidList) {
          var organized = organizeFacts(factList);
          var namespace = organized.namespace;
          var facts = organized.facts;

          var children = [];
          var descendantsCount = 0;
          while (kidList.constructor.name !== "Nil") {
              var kid = kidList.value0;
              descendantsCount += kid.descendantsCount || 0;
              children.push(kid);
              kidList = kidList.value1;
          }
          descendantsCount += children.length;

          return {
              type: "node",
              tag: tag,
              facts: facts,
              children: children,
              namespace: namespace,
              descendantsCount: descendantsCount
          };
      }

      function keyedNode(tag, factList, kidList) {
          var organized = organizeFacts(factList);
          var namespace = organized.namespace;
          var facts = organized.facts;

          var children = [];
          var descendantsCount = 0;
          while (kidList.constructor.name !== "Nil") {
              var kid = kidList.value0;
              descendantsCount += kid.value1.descendantsCount || 0;
              children.push(kid);
              kidList = kidList.value1;
          }
          descendantsCount += children.length;

          return {
              type: "keyed-node",
              tag: tag,
              facts: facts,
              children: children,
              namespace: namespace,
              descendantsCount: descendantsCount
          };
      }

      function custom(factList, model, impl) {
          var facts = organizeFacts(factList).facts;

          return {
              type: "custom",
              facts: facts,
              model: model,
              impl: impl
          };
      }

      function map(tagger, node) {
          return {
              type: "tagger",
              tagger: tagger,
              node: node,
              descendantsCount: 1 + (node.descendantsCount || 0)
          };
      }

      function thunk(func, args, thunk) {
          return {
              type: "thunk",
              func: func,
              args: args,
              thunk: thunk,
              node: undefined
          };
      }

      function lazy(fn, a) {
          return thunk(fn, [a], function() {
              return fn(a);
          });
      }

      function lazy2(fn, a, b) {
          return thunk(fn, [a, b], function() {
              return A2(fn, a, b);
          });
      }

      function lazy3(fn, a, b, c) {
          return thunk(fn, [a, b, c], function() {
              return A3(fn, a, b, c);
          });
      }

      // FACTS

      function organizeFacts(factList) {
          var namespace,
              facts = {};

          while (factList.constructor.name !== "Nil") {
              var entry = factList.value0;
              var key = entry.key;

              if (key === ATTR_KEY || key === ATTR_NS_KEY || key === EVENT_KEY) {
                  var subFacts = facts[key] || {};
                  subFacts[entry.realKey] = entry.value;
                  facts[key] = subFacts;
              } else if (key === STYLE_KEY) {
                  var styles = facts[key] || {};
                  var styleList = entry.value;
                  while (styleList.constructor.name !== "Nil") {
                      var style = styleList.value0;
                      styles[style.value0] = style.value1;
                      styleList = styleList.value1;
                  }
                  facts[key] = styles;
              } else if (key === "namespace") {
                  namespace = entry.value;
              } else if (key === "className") {
                  var classes = facts[key];
                  facts[key] =
                      typeof classes === "undefined" ? entry.value : classes + " " + entry.value;
              } else {
                  facts[key] = entry.value;
              }
              factList = factList.value1;
          }

          return {
              facts: facts,
              namespace: namespace
          };
      }

      ////////////  PROPERTIES AND ATTRIBUTES  ////////////

      function style(value) {
          return {
              key: STYLE_KEY,
              value: value
          };
      }

      function property(key, value) {
          return {
              key: key,
              value: value
          };
      }

      function attribute(key, value) {
          return {
              key: ATTR_KEY,
              realKey: key,
              value: value
          };
      }

      function attributeNS(namespace, key, value) {
          return {
              key: ATTR_NS_KEY,
              realKey: key,
              value: {
                  value: value,
                  namespace: namespace
              }
          };
      }

      function on(name, options, decoder) {
          return {
              key: EVENT_KEY,
              realKey: name,
              value: {
                  options: options,
                  decoder: decoder
              }
          };
      }

      function equalEvents(a, b) {
          if (a.options !== b.options) {
              if (
                  a.options.stopPropagation !== b.options.stopPropagation ||
                  a.options.preventDefault !== b.options.preventDefault
              ) {
                  return false;
              }
          }
          return window._elm_lang$core$Native_Json.equality(a.decoder, b.decoder);
      }

      function mapProperty(func, property) {
          if (property.key !== EVENT_KEY) {
              return property;
          }
          return on(
              property.realKey,
              property.value.options,
              A2(_elm_lang$core$Json_Decode$map, func, property.value.decoder)
          );
      }

      ////////////  RENDER  ////////////

      function render(vNode, eventNode) {
          switch (vNode.type) {
              case "thunk":
                  if (!vNode.node) {
                      vNode.node = vNode.thunk();
                  }
                  return render(vNode.node, eventNode);

              case "tagger":
                  var subNode = vNode.node;
                  var tagger = vNode.tagger;

                  while (subNode.type === "tagger") {
                      typeof tagger !== "object"
                          ? (tagger = [tagger, subNode.tagger])
                          : tagger.push(subNode.tagger);

                      subNode = subNode.node;
                  }

                  var subEventRoot = { tagger: tagger, parent: eventNode };
                  var domNode = render(subNode, subEventRoot);
                  domNode.elm_event_node_ref = subEventRoot;
                  return domNode;

              case "text":
                  return localDoc.createTextNode(vNode.text);

              case "node":
                  var domNode = vNode.namespace
                      ? localDoc.createElementNS(vNode.namespace, vNode.tag)
                      : localDoc.createElement(vNode.tag);

                  applyFacts(domNode, eventNode, vNode.facts);

                  var children = vNode.children;

                  for (var i = 0; i < children.length; i++) {
                      domNode.appendChild(render(children[i], eventNode));
                  }

                  return domNode;

              case "keyed-node":
                  var domNode = vNode.namespace
                      ? localDoc.createElementNS(vNode.namespace, vNode.tag)
                      : localDoc.createElement(vNode.tag);

                  applyFacts(domNode, eventNode, vNode.facts);

                  var children = vNode.children;

                  for (var i = 0; i < children.length; i++) {
                      domNode.appendChild(render(children[i].value1, eventNode));
                  }

                  return domNode;

              case "custom":
                  var domNode = vNode.impl.render(vNode.model);
                  applyFacts(domNode, eventNode, vNode.facts);
                  return domNode;
          }
      }

      ////////////  APPLY FACTS  ////////////

      function applyFacts(domNode, eventNode, facts) {
          for (var key in facts) {
              var value = facts[key];

              switch (key) {
                  case STYLE_KEY:
                      applyStyles(domNode, value);
                      break;

                  case EVENT_KEY:
                      applyEvents(domNode, eventNode, value);
                      break;

                  case ATTR_KEY:
                      applyAttrs(domNode, value);
                      break;

                  case ATTR_NS_KEY:
                      applyAttrsNS(domNode, value);
                      break;

                  case "value":
                      if (domNode[key] !== value) {
                          domNode[key] = value;
                      }
                      break;

                  default:
                      domNode[key] = value;
                      break;
              }
          }
      }

      function applyStyles(domNode, styles) {
          var domNodeStyle = domNode.style;

          for (var key in styles) {
              domNodeStyle[key] = styles[key];
          }
      }

      function applyEvents(domNode, eventNode, events) {
          var allHandlers = domNode.elm_handlers || {};

          for (var key in events) {
              var handler = allHandlers[key];
              var value = events[key];

              if (typeof value === "undefined") {
                  domNode.removeEventListener(key, handler);
                  allHandlers[key] = undefined;
              } else if (typeof handler === "undefined") {
                  var handler = makeEventHandler(eventNode, value);
                  domNode.addEventListener(key, handler);
                  allHandlers[key] = handler;
              } else {
                  handler.info = value;
              }
          }

          domNode.elm_handlers = allHandlers;
      }

      function makeEventHandler(eventNode, info) {
          function eventHandler(event) {
              var info = eventHandler.info;

              var value = A2(window._elm_lang$core$Native_Json.run, info.decoder, event);

              if (value.ctor === "Ok") {
                  var options = info.options;
                  if (options.stopPropagation) {
                      event.stopPropagation();
                  }
                  if (options.preventDefault) {
                      event.preventDefault();
                  }

                  var message = value.value0;

                  var currentEventNode = eventNode;
                  while (currentEventNode) {
                      var tagger = currentEventNode.tagger;
                      if (typeof tagger === "function") {
                          message = tagger(message);
                      } else {
                          for (var i = tagger.length; i--; ) {
                              message = tagger[i](message);
                          }
                      }
                      currentEventNode = currentEventNode.parent;
                  }
              }
          }

          eventHandler.info = info;

          return eventHandler;
      }

      function applyAttrs(domNode, attrs) {
          for (var key in attrs) {
              var value = attrs[key];
              if (typeof value === "undefined") {
                  domNode.removeAttribute(key);
              } else {
                  domNode.setAttribute(key, value);
              }
          }
      }

      function applyAttrsNS(domNode, nsAttrs) {
          for (var key in nsAttrs) {
              var pair = nsAttrs[key];
              var namespace = pair.namespace;
              var value = pair.value;

              if (typeof value === "undefined") {
                  domNode.removeAttributeNS(namespace, key);
              } else {
                  domNode.setAttributeNS(namespace, key, value);
              }
          }
      }

      ////////////  DIFF  ////////////

      function diff(a, b) {
          var patches = [];
          diffHelp(a, b, patches, 0);
          return patches;
      }

      function makePatch(type, index, data) {
          return {
              index: index,
              type: type,
              data: data,
              domNode: undefined,
              eventNode: undefined
          };
      }

      function diffHelp(a, b, patches, index) {
          if (a === b) {
              return;
          }

          var aType = a.type;
          var bType = b.type;

          // Bail if you run into different types of nodes. Implies that the
          // structure has changed significantly and it's not worth a diff.
          if (aType !== bType) {
              patches.push(makePatch("p-redraw", index, b));
              return;
          }

          // Now we know that both nodes are the same type.
          switch (bType) {
              case "thunk":
                  var aArgs = a.args;
                  var bArgs = b.args;
                  var i = aArgs.length;
                  var same = a.func === b.func && i === bArgs.length;
                  while (same && i--) {
                      same = aArgs[i] === bArgs[i];
                  }
                  if (same) {
                      b.node = a.node;
                      return;
                  }
                  b.node = b.thunk();
                  var subPatches = [];
                  diffHelp(a.node, b.node, subPatches, 0);
                  if (subPatches.length > 0) {
                      patches.push(makePatch("p-thunk", index, subPatches));
                  }
                  return;

              case "tagger":
                  // gather nested taggers
                  var aTaggers = a.tagger;
                  var bTaggers = b.tagger;
                  var nesting = false;

                  var aSubNode = a.node;
                  while (aSubNode.type === "tagger") {
                      nesting = true;

                      typeof aTaggers !== "object"
                          ? (aTaggers = [aTaggers, aSubNode.tagger])
                          : aTaggers.push(aSubNode.tagger);

                      aSubNode = aSubNode.node;
                  }

                  var bSubNode = b.node;
                  while (bSubNode.type === "tagger") {
                      nesting = true;

                      typeof bTaggers !== "object"
                          ? (bTaggers = [bTaggers, bSubNode.tagger])
                          : bTaggers.push(bSubNode.tagger);

                      bSubNode = bSubNode.node;
                  }

                  // Just bail if different numbers of taggers. This implies the
                  // structure of the virtual DOM has changed.
                  if (nesting && aTaggers.length !== bTaggers.length) {
                      patches.push(makePatch("p-redraw", index, b));
                      return;
                  }

                  // check if taggers are "the same"
                  if (nesting ? !pairwiseRefEqual(aTaggers, bTaggers) : aTaggers !== bTaggers) {
                      patches.push(makePatch("p-tagger", index, bTaggers));
                  }

                  // diff everything below the taggers
                  diffHelp(aSubNode, bSubNode, patches, index + 1);
                  return;

              case "text":
                  if (a.text !== b.text) {
                      patches.push(makePatch("p-text", index, b.text));
                      return;
                  }

                  return;

              case "node":
                  // Bail if obvious indicators have changed. Implies more serious
                  // structural changes such that it's not worth it to diff.
                  if (a.tag !== b.tag || a.namespace !== b.namespace) {
                      patches.push(makePatch("p-redraw", index, b));
                      return;
                  }

                  var factsDiff = diffFacts(a.facts, b.facts);

                  if (typeof factsDiff !== "undefined") {
                      patches.push(makePatch("p-facts", index, factsDiff));
                  }

                  diffChildren(a, b, patches, index);
                  return;

              case "keyed-node":
                  // Bail if obvious indicators have changed. Implies more serious
                  // structural changes such that it's not worth it to diff.
                  if (a.tag !== b.tag || a.namespace !== b.namespace) {
                      patches.push(makePatch("p-redraw", index, b));
                      return;
                  }

                  var factsDiff = diffFacts(a.facts, b.facts);

                  if (typeof factsDiff !== "undefined") {
                      patches.push(makePatch("p-facts", index, factsDiff));
                  }

                  diffKeyedChildren(a, b, patches, index);
                  return;

              case "custom":
                  if (a.impl !== b.impl) {
                      patches.push(makePatch("p-redraw", index, b));
                      return;
                  }

                  var factsDiff = diffFacts(a.facts, b.facts);
                  if (typeof factsDiff !== "undefined") {
                      patches.push(makePatch("p-facts", index, factsDiff));
                  }

                  var patch = b.impl.diff(a, b);
                  if (patch) {
                      patches.push(makePatch("p-custom", index, patch));
                      return;
                  }

                  return;
          }
      }

      // assumes the incoming arrays are the same length
      function pairwiseRefEqual(as, bs) {
          for (var i = 0; i < as.length; i++) {
              if (as[i] !== bs[i]) {
                  return false;
              }
          }

          return true;
      }

      // TODO Instead of creating a new diff object, it's possible to just test if
      // there *is* a diff. During the actual patch, do the diff again and make the
      // modifications directly. This way, there's no new allocations. Worth it?
      function diffFacts(a, b, category) {
          var diff;

          // look for changes and removals
          for (var aKey in a) {
              if (
                  aKey === STYLE_KEY ||
                  aKey === EVENT_KEY ||
                  aKey === ATTR_KEY ||
                  aKey === ATTR_NS_KEY
              ) {
                  var subDiff = diffFacts(a[aKey], b[aKey] || {}, aKey);
                  if (subDiff) {
                      diff = diff || {};
                      diff[aKey] = subDiff;
                  }
                  continue;
              }

              // remove if not in the new facts
              if (!(aKey in b)) {
                  diff = diff || {};
                  diff[aKey] =
                      typeof category === "undefined"
                          ? typeof a[aKey] === "string" ? "" : null
                          : category === STYLE_KEY
                              ? ""
                              : category === EVENT_KEY || category === ATTR_KEY
                                  ? undefined
                                  : { namespace: a[aKey].namespace, value: undefined };

                  continue;
              }

              var aValue = a[aKey];
              var bValue = b[aKey];

              // reference equal, so don't worry about it
              if (
                  (aValue === bValue && aKey !== "value") ||
                  (category === EVENT_KEY && equalEvents(aValue, bValue))
              ) {
                  continue;
              }

              diff = diff || {};
              diff[aKey] = bValue;
          }

          // add new stuff
          for (var bKey in b) {
              if (!(bKey in a)) {
                  diff = diff || {};
                  diff[bKey] = b[bKey];
              }
          }

          return diff;
      }

      function diffChildren(aParent, bParent, patches, rootIndex) {
          var aChildren = aParent.children;
          var bChildren = bParent.children;

          var aLen = aChildren.length;
          var bLen = bChildren.length;

          // FIGURE OUT IF THERE ARE INSERTS OR REMOVALS

          if (aLen > bLen) {
              patches.push(makePatch("p-remove-last", rootIndex, aLen - bLen));
          } else if (aLen < bLen) {
              patches.push(makePatch("p-append", rootIndex, bChildren.slice(aLen)));
          }

          // PAIRWISE DIFF EVERYTHING ELSE

          var index = rootIndex;
          var minLen = aLen < bLen ? aLen : bLen;
          for (var i = 0; i < minLen; i++) {
              index++;
              var aChild = aChildren[i];
              diffHelp(aChild, bChildren[i], patches, index);
              index += aChild.descendantsCount || 0;
          }
      }

      ////////////  KEYED DIFF  ////////////

      function diffKeyedChildren(aParent, bParent, patches, rootIndex) {
          var localPatches = [];

          var changes = {}; // Dict String Entry
          var inserts = []; // Array { index : Int, entry : Entry }
          // type Entry = { tag : String, vnode : VNode, index : Int, data : _ }

          var aChildren = aParent.children;
          var bChildren = bParent.children;
          var aLen = aChildren.length;
          var bLen = bChildren.length;
          var aIndex = 0;
          var bIndex = 0;

          var index = rootIndex;

          while (aIndex < aLen && bIndex < bLen) {
              var a = aChildren[aIndex];
              var b = bChildren[bIndex];

              var aKey = a.value0;
              var bKey = b.value0;
              var aNode = a.value1;
              var bNode = b.value1;

              // check if keys match

              if (aKey === bKey) {
                  index++;
                  diffHelp(aNode, bNode, localPatches, index);
                  index += aNode.descendantsCount || 0;

                  aIndex++;
                  bIndex++;
                  continue;
              }

              // look ahead 1 to detect insertions and removals.

              var aLookAhead = aIndex + 1 < aLen;
              var bLookAhead = bIndex + 1 < bLen;

              if (aLookAhead) {
                  var aNext = aChildren[aIndex + 1];
                  var aNextKey = aNext.value0;
                  var aNextNode = aNext.value1;
                  var oldMatch = bKey === aNextKey;
              }

              if (bLookAhead) {
                  var bNext = bChildren[bIndex + 1];
                  var bNextKey = bNext.value0;
                  var bNextNode = bNext.value1;
                  var newMatch = aKey === bNextKey;
              }

              // swap a and b
              if (aLookAhead && bLookAhead && newMatch && oldMatch) {
                  index++;
                  diffHelp(aNode, bNextNode, localPatches, index);
                  insertNode(changes, localPatches, aKey, bNode, bIndex, inserts);
                  index += aNode.descendantsCount || 0;

                  index++;
                  removeNode(changes, localPatches, aKey, aNextNode, index);
                  index += aNextNode.descendantsCount || 0;

                  aIndex += 2;
                  bIndex += 2;
                  continue;
              }

              // insert b
              if (bLookAhead && newMatch) {
                  index++;
                  insertNode(changes, localPatches, bKey, bNode, bIndex, inserts);
                  diffHelp(aNode, bNextNode, localPatches, index);
                  index += aNode.descendantsCount || 0;

                  aIndex += 1;
                  bIndex += 2;
                  continue;
              }

              // remove a
              if (aLookAhead && oldMatch) {
                  index++;
                  removeNode(changes, localPatches, aKey, aNode, index);
                  index += aNode.descendantsCount || 0;

                  index++;
                  diffHelp(aNextNode, bNode, localPatches, index);
                  index += aNextNode.descendantsCount || 0;

                  aIndex += 2;
                  bIndex += 1;
                  continue;
              }

              // remove a, insert b
              if (aLookAhead && bLookAhead && aNextKey === bNextKey) {
                  index++;
                  removeNode(changes, localPatches, aKey, aNode, index);
                  insertNode(changes, localPatches, bKey, bNode, bIndex, inserts);
                  index += aNode.descendantsCount || 0;

                  index++;
                  diffHelp(aNextNode, bNextNode, localPatches, index);
                  index += aNextNode.descendantsCount || 0;

                  aIndex += 2;
                  bIndex += 2;
                  continue;
              }

              break;
          }

          // eat up any remaining nodes with removeNode and insertNode

          while (aIndex < aLen) {
              index++;
              var a = aChildren[aIndex];
              var aNode = a.value1;
              removeNode(changes, localPatches, a.value0, aNode, index);
              index += aNode.descendantsCount || 0;
              aIndex++;
          }

          var endInserts;
          while (bIndex < bLen) {
              endInserts = endInserts || [];
              var b = bChildren[bIndex];
              insertNode(changes, localPatches, b.value0, b.value1, undefined, endInserts);
              bIndex++;
          }

          if (localPatches.length > 0 || inserts.length > 0 || typeof endInserts !== "undefined") {
              patches.push(
                  makePatch("p-reorder", rootIndex, {
                      patches: localPatches,
                      inserts: inserts,
                      endInserts: endInserts
                  })
              );
          }
      }

      ////////////  CHANGES FROM KEYED DIFF  ////////////

      var POSTFIX = "_elmW6BL";

      function insertNode(changes, localPatches, key, vnode, bIndex, inserts) {
          var entry = changes[key];

          // never seen this key before
          if (typeof entry === "undefined") {
              entry = {
                  tag: "insert",
                  vnode: vnode,
                  index: bIndex,
                  data: undefined
              };

              inserts.push({ index: bIndex, entry: entry });
              changes[key] = entry;

              return;
          }

          // this key was removed earlier, a match!
          if (entry.tag === "remove") {
              inserts.push({ index: bIndex, entry: entry });

              entry.tag = "move";
              var subPatches = [];
              diffHelp(entry.vnode, vnode, subPatches, entry.index);
              entry.index = bIndex;
              entry.data.data = {
                  patches: subPatches,
                  entry: entry
              };

              return;
          }

          // this key has already been inserted or moved, a duplicate!
          insertNode(changes, localPatches, key + POSTFIX, vnode, bIndex, inserts);
      }

      function removeNode(changes, localPatches, key, vnode, index) {
          var entry = changes[key];

          // never seen this key before
          if (typeof entry === "undefined") {
              var patch = makePatch("p-remove", index, undefined);
              localPatches.push(patch);

              changes[key] = {
                  tag: "remove",
                  vnode: vnode,
                  index: index,
                  data: patch
              };

              return;
          }

          // this key was inserted earlier, a match!
          if (entry.tag === "insert") {
              entry.tag = "move";
              var subPatches = [];
              diffHelp(vnode, entry.vnode, subPatches, index);

              var patch = makePatch("p-remove", index, {
                  patches: subPatches,
                  entry: entry
              });
              localPatches.push(patch);

              return;
          }

          // this key has already been removed or moved, a duplicate!
          removeNode(changes, localPatches, key + POSTFIX, vnode, index);
      }

      ////////////  ADD DOM NODES  ////////////
      //
      // Each DOM node has an "index" assigned in order of traversal. It is important
      // to minimize our crawl over the actual DOM, so these indexes (along with the
      // descendantsCount of virtual nodes) let us skip touching entire subtrees of
      // the DOM if we know there are no patches there.

      function addDomNodes(domNode, vNode, patches, eventNode) {
          addDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.descendantsCount, eventNode);
      }

      // assumes `patches` is non-empty and indexes increase monotonically.
      function addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode) {
          var patch = patches[i];
          var index = patch.index;

          while (index === low) {
              var patchType = patch.type;

              if (patchType === "p-thunk") {
                  addDomNodes(domNode, vNode.node, patch.data, eventNode);
              } else if (patchType === "p-reorder") {
                  patch.domNode = domNode;
                  patch.eventNode = eventNode;

                  var subPatches = patch.data.patches;
                  if (subPatches.length > 0) {
                      addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
                  }
              } else if (patchType === "p-remove") {
                  patch.domNode = domNode;
                  patch.eventNode = eventNode;

                  var data = patch.data;
                  if (typeof data !== "undefined") {
                      data.entry.data = domNode;
                      var subPatches = data.patches;
                      if (subPatches.length > 0) {
                          addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
                      }
                  }
              } else {
                  patch.domNode = domNode;
                  patch.eventNode = eventNode;
              }

              i++;

              if (!(patch = patches[i]) || (index = patch.index) > high) {
                  return i;
              }
          }

          switch (vNode.type) {
              case "tagger":
                  var subNode = vNode.node;

                  while (subNode.type === "tagger") {
                      subNode = subNode.node;
                  }

                  return addDomNodesHelp(
                      domNode,
                      subNode,
                      patches,
                      i,
                      low + 1,
                      high,
                      domNode.elm_event_node_ref
                  );

              case "node":
                  var vChildren = vNode.children;
                  var childNodes = domNode.childNodes;
                  for (var j = 0; j < vChildren.length; j++) {
                      low++;
                      var vChild = vChildren[j];
                      var nextLow = low + (vChild.descendantsCount || 0);
                      if (low <= index && index <= nextLow) {
                          i = addDomNodesHelp(
                              childNodes[j],
                              vChild,
                              patches,
                              i,
                              low,
                              nextLow,
                              eventNode
                          );
                          if (!(patch = patches[i]) || (index = patch.index) > high) {
                              return i;
                          }
                      }
                      low = nextLow;
                  }
                  return i;

              case "keyed-node":
                  var vChildren = vNode.children;
                  var childNodes = domNode.childNodes;
                  for (var j = 0; j < vChildren.length; j++) {
                      low++;
                      var vChild = vChildren[j].value1;
                      var nextLow = low + (vChild.descendantsCount || 0);
                      if (low <= index && index <= nextLow) {
                          i = addDomNodesHelp(
                              childNodes[j],
                              vChild,
                              patches,
                              i,
                              low,
                              nextLow,
                              eventNode
                          );
                          if (!(patch = patches[i]) || (index = patch.index) > high) {
                              return i;
                          }
                      }
                      low = nextLow;
                  }
                  return i;

              case "text":
              case "thunk":
                  throw new Error("should never traverse `text` or `thunk` nodes like this");
          }
      }

      ////////////  APPLY PATCHES  ////////////

      function applyPatches(rootDomNode, oldVirtualNode, patches, eventNode) {
          if (patches.length === 0) {
              return rootDomNode;
          }

          addDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);
          return applyPatchesHelp(rootDomNode, patches);
      }

      function applyPatchesHelp(rootDomNode, patches) {
          for (var i = 0; i < patches.length; i++) {
              var patch = patches[i];
              var localDomNode = patch.domNode;
              var newNode = applyPatch(localDomNode, patch);
              if (localDomNode === rootDomNode) {
                  rootDomNode = newNode;
              }
          }
          return rootDomNode;
      }

      function applyPatch(domNode, patch) {
          switch (patch.type) {
              case "p-redraw":
                  return applyPatchRedraw(domNode, patch.data, patch.eventNode);

              case "p-facts":
                  applyFacts(domNode, patch.eventNode, patch.data);
                  return domNode;

              case "p-text":
                  domNode.replaceData(0, domNode.length, patch.data);
                  return domNode;

              case "p-thunk":
                  return applyPatchesHelp(domNode, patch.data);

              case "p-tagger":
                  if (typeof domNode.elm_event_node_ref !== "undefined") {
                      domNode.elm_event_node_ref.tagger = patch.data;
                  } else {
                      domNode.elm_event_node_ref = { tagger: patch.data, parent: patch.eventNode };
                  }
                  return domNode;

              case "p-remove-last":
                  var i = patch.data;
                  while (i--) {
                      domNode.removeChild(domNode.lastChild);
                  }
                  return domNode;

              case "p-append":
                  var newNodes = patch.data;
                  for (var i = 0; i < newNodes.length; i++) {
                      domNode.appendChild(render(newNodes[i], patch.eventNode));
                  }
                  return domNode;

              case "p-remove":
                  var data = patch.data;
                  if (typeof data === "undefined") {
                      domNode.parentNode.removeChild(domNode);
                      return domNode;
                  }
                  var entry = data.entry;
                  if (typeof entry.index !== "undefined") {
                      domNode.parentNode.removeChild(domNode);
                  }
                  entry.data = applyPatchesHelp(domNode, data.patches);
                  return domNode;

              case "p-reorder":
                  return applyPatchReorder(domNode, patch);

              case "p-custom":
                  var impl = patch.data;
                  return impl.applyPatch(domNode, impl.data);

              default:
                  throw new Error("Ran into an unknown patch!");
          }
      }

      function applyPatchRedraw(domNode, vNode, eventNode) {
          var parentNode = domNode.parentNode;
          var newNode = render(vNode, eventNode);

          if (typeof newNode.elm_event_node_ref === "undefined") {
              newNode.elm_event_node_ref = domNode.elm_event_node_ref;
          }

          if (parentNode && newNode !== domNode) {
              parentNode.replaceChild(newNode, domNode);
          }
          return newNode;
      }

      function applyPatchReorder(domNode, patch) {
          var data = patch.data;

          // remove end inserts
          var frag = applyPatchReorderEndInsertsHelp(data.endInserts, patch);

          // removals
          domNode = applyPatchesHelp(domNode, data.patches);

          // inserts
          var inserts = data.inserts;
          for (var i = 0; i < inserts.length; i++) {
              var insert = inserts[i];
              var entry = insert.entry;
              var node = entry.tag === "move" ? entry.data : render(entry.vnode, patch.eventNode);
              domNode.insertBefore(node, domNode.childNodes[insert.index]);
          }

          // add end inserts
          if (typeof frag !== "undefined") {
              domNode.appendChild(frag);
          }

          return domNode;
      }

      function applyPatchReorderEndInsertsHelp(endInserts, patch) {
          if (typeof endInserts === "undefined") {
              return;
          }

          var frag = localDoc.createDocumentFragment();
          for (var i = 0; i < endInserts.length; i++) {
              var insert = endInserts[i];
              var entry = insert.entry;
              frag.appendChild(
                  entry.tag === "move" ? entry.data : render(entry.vnode, patch.eventNode)
              );
          }
          return frag;
      }

      // PROGRAMS

      var program = makeProgram(checkNoFlags);
      var programWithFlags = makeProgram(checkYesFlags);

      function makeProgram(flagChecker) {
          return F2(function(debugWrap, impl) {
              return function(flagDecoder) {
                  return function(object, moduleName, debugMetadata) {
                      var checker = flagChecker(flagDecoder, moduleName);
                      if (typeof debugMetadata === "undefined") {
                          normalSetup(impl, object, moduleName, checker);
                      } else {
                          debugSetup(A2(debugWrap, debugMetadata, impl), object, moduleName, checker);
                      }
                  };
              };
          });
      }

      function staticProgram(vNode) {
          var nothing = _elm_lang$core$Native_Utils.Tuple2(
              _elm_lang$core$Native_Utils.Tuple0,
              _elm_lang$core$Platform_Cmd$none
          );
          return A2(program, _elm_lang$virtual_dom$VirtualDom_Debug$wrap, {
              init: nothing,
              view: function() {
                  return vNode;
              },
              update: F2(function() {
                  return nothing;
              }),
              subscriptions: function() {
                  return _elm_lang$core$Platform_Sub$none;
              }
          })();
      }

      // FLAG CHECKERS

      function checkNoFlags(flagDecoder, moduleName) {
          return function(init, flags, domNode) {
              if (typeof flags === "undefined") {
                  return init;
              }

              var errorMessage =
                  "The `" +
                  moduleName +
                  "` module does not need flags.\n" +
                  "Initialize it with no arguments and you should be all set!";

              crash(errorMessage, domNode);
          };
      }

      function checkYesFlags(flagDecoder, moduleName) {
          return function(init, flags, domNode) {
              if (typeof flagDecoder === "undefined") {
                  var errorMessage =
                      "Are you trying to sneak a Never value into Elm? Trickster!\n" +
                      "It looks like " +
                      moduleName +
                      ".main is defined with `programWithFlags` but has type `Program Never`.\n" +
                      "Use `program` instead if you do not want flags.";

                  crash(errorMessage, domNode);
              }

              var result = A2(window._elm_lang$core$Native_Json.run, flagDecoder, flags);
              if (result.ctor === "Ok") {
                  return init(result.value0);
              }

              var errorMessage =
                  "Trying to initialize the `" +
                  moduleName +
                  "` module with an unexpected flag.\n" +
                  "I tried to convert it to an Elm value, but ran into this problem:\n\n" +
                  result.value0;

              crash(errorMessage, domNode);
          };
      }

      function crash(errorMessage, domNode) {
          if (domNode) {
              domNode.innerHTML =
                  '<div style="padding-left:1em;">' +
                  '<h2 style="font-weight:normal;"><b>Oops!</b> Something went wrong when starting your Elm program.</h2>' +
                  '<pre style="padding-left:1em;">' +
                  errorMessage +
                  "</pre>" +
                  "</div>";
          }

          throw new Error(errorMessage);
      }

      //  NORMAL SETUP

      function normalSetup(impl, object, moduleName, flagChecker) {
          object["embed"] = function embed(node, flags) {
              while (node.lastChild) {
                  node.removeChild(node.lastChild);
              }

              return _elm_lang$core$Native_Platform.initialize(
                  flagChecker(impl.init, flags, node),
                  impl.update,
                  impl.subscriptions,
                  normalRenderer(node, impl.view)
              );
          };

          object["fullscreen"] = function fullscreen(flags) {
              return _elm_lang$core$Native_Platform.initialize(
                  flagChecker(impl.init, flags, document.body),
                  impl.update,
                  impl.subscriptions,
                  normalRenderer(document.body, impl.view)
              );
          };
      }

      function normalRenderer(parentNode, view) {
          return function(tagger, initialModel) {
              var eventNode = { tagger: tagger, parent: undefined };
              var initialVirtualNode = view(initialModel);
              var domNode = render(initialVirtualNode, eventNode);
              parentNode.appendChild(domNode);
              return makeStepper(domNode, view, initialVirtualNode, eventNode);
          };
      }

      // STEPPER

      var rAF =
          typeof requestAnimationFrame !== "undefined"
              ? requestAnimationFrame
              : function(callback) {
                    setTimeout(callback, 1000 / 60);
                };

      function makeStepper(domNode, view, initialVirtualNode, eventNode) {
          var state = "NO_REQUEST";
          var currNode = initialVirtualNode;
          var nextModel;

          function updateIfNeeded() {
              switch (state) {
                  case "NO_REQUEST":
                      throw new Error(
                          "Unexpected draw callback.\n" +
                              "Please report this to <https://github.com/elm-lang/virtual-dom/issues>.")
                       ;

                  case "PENDING_REQUEST":
                      rAF(updateIfNeeded);
                      state = "EXTRA_REQUEST";

                      var nextNode = view(nextModel);
                      var patches = diff(currNode, nextNode);
                      domNode = applyPatches(domNode, currNode, patches, eventNode);
                      currNode = nextNode;

                      return;

                  case "EXTRA_REQUEST":
                      state = "NO_REQUEST";
                      return;
              }
          }

          return function stepper(model) {
              if (state === "NO_REQUEST") {
                  rAF(updateIfNeeded);
              }
              state = "PENDING_REQUEST";
              nextModel = model;
          };
      }

      // DEBUG SETUP

      function debugSetup(impl, object, moduleName, flagChecker) {
          object["fullscreen"] = function fullscreen(flags) {
              var popoutRef = { doc: undefined };
              return _elm_lang$core$Native_Platform.initialize(
                  flagChecker(impl.init, flags, document.body),
                  impl.update(scrollTask(popoutRef)),
                  impl.subscriptions,
                  debugRenderer(
                      moduleName,
                      document.body,
                      popoutRef,
                      impl.view,
                      impl.viewIn,
                      impl.viewOut
                  )
              );
          };

          object["embed"] = function fullscreen(node, flags) {
              var popoutRef = { doc: undefined };
              return _elm_lang$core$Native_Platform.initialize(
                  flagChecker(impl.init, flags, node),
                  impl.update(scrollTask(popoutRef)),
                  impl.subscriptions,
                  debugRenderer(moduleName, node, popoutRef, impl.view, impl.viewIn, impl.viewOut)
              );
          };
      }

      function scrollTask(popoutRef) {
          return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {
              var doc = popoutRef.doc;
              if (doc) {
                  var msgs = doc.getElementsByClassName("debugger-sidebar-messages")[0];
                  if (msgs) {
                      msgs.scrollTop = msgs.scrollHeight;
                  }
              }
              callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
          });
      }

      function debugRenderer(moduleName, parentNode, popoutRef, view, viewIn, viewOut) {
          return function(tagger, initialModel) {
              var appEventNode = { tagger: tagger, parent: undefined };
              var eventNode = { tagger: tagger, parent: undefined };

              // make normal stepper
              var appVirtualNode = view(initialModel);
              var appNode = render(appVirtualNode, appEventNode);
              parentNode.appendChild(appNode);
              var appStepper = makeStepper(appNode, view, appVirtualNode, appEventNode);

              // make overlay stepper
              var overVirtualNode = viewIn(initialModel).value1;
              var overNode = render(overVirtualNode, eventNode);
              parentNode.appendChild(overNode);
              var wrappedViewIn = wrapViewIn(appEventNode, overNode, viewIn);
              var overStepper = makeStepper(overNode, wrappedViewIn, overVirtualNode, eventNode);

              // make debugger stepper
              var debugStepper = makeDebugStepper(
                  initialModel,
                  viewOut,
                  eventNode,
                  parentNode,
                  moduleName,
                  popoutRef
              );

              return function stepper(model) {
                  appStepper(model);
                  overStepper(model);
                  debugStepper(model);
              };
          };
      }

      function makeDebugStepper(initialModel, view, eventNode, parentNode, moduleName, popoutRef) {
          var curr;
          var domNode;

          return function stepper(model) {
              if (!model.isDebuggerOpen) {
                  return;
              }

              if (!popoutRef.doc) {
                  curr = view(model);
                  domNode = openDebugWindow(moduleName, popoutRef, curr, eventNode);
                  return;
              }

              // switch to document of popout
              localDoc = popoutRef.doc;

              var next = view(model);
              var patches = diff(curr, next);
              domNode = applyPatches(domNode, curr, patches, eventNode);
              curr = next;

              // switch back to normal document
              localDoc = document;
          };
      }

      function openDebugWindow(moduleName, popoutRef, virtualNode, eventNode) {
          var w = 900;
          var h = 360;
          var x = screen.width - w;
          var y = screen.height - h;
          var debugWindow = window.open(
              "",
              "",
              "width=" + w + ",height=" + h + ",left=" + x + ",top=" + y
          );

          // switch to window document
          localDoc = debugWindow.document;

          popoutRef.doc = localDoc;
          localDoc.title = "Debugger - " + moduleName;
          localDoc.body.style.margin = "0";
          localDoc.body.style.padding = "0";
          var domNode = render(virtualNode, eventNode);
          localDoc.body.appendChild(domNode);

          localDoc.addEventListener("keydown", function(event) {
              if (event.metaKey && event.which === 82) {
                  window.location.reload();
              }
              if (event.which === 38) {
                  eventNode.tagger({ ctor: "Up" });
                  event.preventDefault();
              }
              if (event.which === 40) {
                  eventNode.tagger({ ctor: "Down" });
                  event.preventDefault();
              }
          });

          function close() {
              popoutRef.doc = undefined;
              debugWindow.close();
          }
          window.addEventListener("unload", close);
          debugWindow.addEventListener("unload", function() {
              popoutRef.doc = undefined;
              window.removeEventListener("unload", close);
              eventNode.tagger({ ctor: "Close" });
          });

          // switch back to the normal document
          localDoc = document;

          return domNode;
      }

      // BLOCK EVENTS

      function wrapViewIn(appEventNode, overlayNode, viewIn) {
          var ignorer = makeIgnorer(overlayNode);
          var blocking = "Normal";
          var overflow;

          var normalTagger = appEventNode.tagger;
          var blockTagger = function() {};

          return function(model) {
              var tuple = viewIn(model);
              var newBlocking = tuple.value0.ctor;
              appEventNode.tagger = newBlocking === "Normal" ? normalTagger : blockTagger;
              if (blocking !== newBlocking) {
                  traverse("removeEventListener", ignorer, blocking);
                  traverse("addEventListener", ignorer, newBlocking);

                  if (blocking === "Normal") {
                      overflow = document.body.style.overflow;
                      document.body.style.overflow = "hidden";
                  }

                  if (newBlocking === "Normal") {
                      document.body.style.overflow = overflow;
                  }

                  blocking = newBlocking;
              }
              return tuple.value1;
          };
      }

      function traverse(verbEventListener, ignorer, blocking) {
          switch (blocking) {
              case "Normal":
                  return;

              case "Pause":
                  return traverseHelp(verbEventListener, ignorer, mostEvents);

              case "Message":
                  return traverseHelp(verbEventListener, ignorer, allEvents);
          }
      }

      function traverseHelp(verbEventListener, handler, eventNames) {
          for (var i = 0; i < eventNames.length; i++) {
              document.body[verbEventListener](eventNames[i], handler, true);
          }
      }

      function makeIgnorer(overlayNode) {
          return function(event) {
              if (event.type === "keydown" && event.metaKey && event.which === 82) {
                  return;
              }

              var isScroll = event.type === "scroll" || event.type === "wheel";

              var node = event.target;
              while (node !== null) {
                  if (node.className === "elm-overlay-message-details" && isScroll) {
                      return;
                  }

                  if (node === overlayNode && !isScroll) {
                      return;
                  }
                  node = node.parentNode;
              }

              event.stopPropagation();
              event.preventDefault();
          };
      }

      var mostEvents = [
          "click",
          "dblclick",
          "mousemove",
          "mouseup",
          "mousedown",
          "mouseenter",
          "mouseleave",
          "touchstart",
          "touchend",
          "touchcancel",
          "touchmove",
          "pointerdown",
          "pointerup",
          "pointerover",
          "pointerout",
          "pointerenter",
          "pointerleave",
          "pointermove",
          "pointercancel",
          "dragstart",
          "drag",
          "dragend",
          "dragenter",
          "dragover",
          "dragleave",
          "drop",
          "keyup",
          "keydown",
          "keypress",
          "input",
          "change",
          "focus",
          "blur"
      ];

      var allEvents = mostEvents.concat("wheel", "scroll");

      return {
          node: node,
          text: text,
          custom: custom,
          map: F2(map),

          onWithOptions: F3(on),
          style: style,
          property: F2(property),
          attribute: F2(attribute),
          attributeNS: F3(attributeNS),
          mapProperty: F2(mapProperty),

          lazy: F2(lazy),
          lazy2: F3(lazy2),
          lazy3: F4(lazy3),
          keyedNode: F3(keyedNode),

          program: program,
          programWithFlags: programWithFlags,
          staticProgram: staticProgram,

          // Extra exposition
          normalRenderer: normalRenderer
      };
  })();

  var vdom = _elm_lang$virtual_dom$Native_VirtualDom;

  exports.node_ = vdom.node;
  exports.text = vdom.text;  

  exports.onWithOptions = vdom.onWithOptions;
  exports.style = vdom.style;
  exports.property = vdom.property;
  exports.attribute = vdom.attribute;
  exports.attributeNS = vdom.attributeNS;
  exports.mapProperty = vdom.mapProperty;

  exports.lazy = vdom.lazy;
  exports.lazy2 = vdom.lazy2;
  exports.lazy3 = vdom.lazy3;         

  // exports.program = vdom.program;
  // exports.programWithFlags = vdom.programWithFlags;
  // exports.staticProgram = vdom.staticProgram;
  exports.normalRenderer = vdom.normalRenderer;
})(PS["Elm.Native.VirtualDom"] = PS["Elm.Native.VirtualDom"] || {});
(function(exports) {//import Maybe, Native.Array, Native.List, Native.Utils, Result //

  function F(arity, fun, wrapper) {
      wrapper.a = arity;
      wrapper.f = fun;
      return wrapper;
  }

  function F2(fun) {
      return F(2, fun, function(a) {
          return function(b) {
              return fun(a, b);
          };
      });
  }
  function F3(fun) {
      return F(3, fun, function(a) {
          return function(b) {
              return function(c) {
                  return fun(a, b, c);
              };
          };
      });
  }
  function F4(fun) {
      return F(4, fun, function(a) {
          return function(b) {
              return function(c) {
                  return function(d) {
                      return fun(a, b, c, d);
                  };
              };
          };
      });
  }
  function F5(fun) {
      return F(5, fun, function(a) {
          return function(b) {
              return function(c) {
                  return function(d) {
                      return function(e) {
                          return fun(a, b, c, d, e);
                      };
                  };
              };
          };
      });
  }
  function F6(fun) {
      return F(6, fun, function(a) {
          return function(b) {
              return function(c) {
                  return function(d) {
                      return function(e) {
                          return function(f) {
                              return fun(a, b, c, d, e, f);
                          };
                      };
                  };
              };
          };
      });
  }
  function F7(fun) {
      return F(7, fun, function(a) {
          return function(b) {
              return function(c) {
                  return function(d) {
                      return function(e) {
                          return function(f) {
                              return function(g) {
                                  return fun(a, b, c, d, e, f, g);
                              };
                          };
                      };
                  };
              };
          };
      });
  }
  function F8(fun) {
      return F(8, fun, function(a) {
          return function(b) {
              return function(c) {
                  return function(d) {
                      return function(e) {
                          return function(f) {
                              return function(g) {
                                  return function(h) {
                                      return fun(a, b, c, d, e, f, g, h);
                                  };
                              };
                          };
                      };
                  };
              };
          };
      });
  }
  function F9(fun) {
      return F(9, fun, function(a) {
          return function(b) {
              return function(c) {
                  return function(d) {
                      return function(e) {
                          return function(f) {
                              return function(g) {
                                  return function(h) {
                                      return function(i) {
                                          return fun(a, b, c, d, e, f, g, h, i);
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      });
  }

  function A2(fun, a, b) {
      return fun.a === 2 ? fun.f(a, b) : fun(a)(b);
  }
  function A3(fun, a, b, c) {
      return fun.a === 3 ? fun.f(a, b, c) : fun(a)(b)(c);
  }
  function A4(fun, a, b, c, d) {
      return fun.a === 4 ? fun.f(a, b, c, d) : fun(a)(b)(c)(d);
  }
  function A5(fun, a, b, c, d, e) {
      return fun.a === 5 ? fun.f(a, b, c, d, e) : fun(a)(b)(c)(d)(e);
  }
  function A6(fun, a, b, c, d, e, f) {
      return fun.a === 6 ? fun.f(a, b, c, d, e, f) : fun(a)(b)(c)(d)(e)(f);
  }
  function A7(fun, a, b, c, d, e, f, g) {
      return fun.a === 7 ? fun.f(a, b, c, d, e, f, g) : fun(a)(b)(c)(d)(e)(f)(g);
  }
  function A8(fun, a, b, c, d, e, f, g, h) {
      return fun.a === 8 ? fun.f(a, b, c, d, e, f, g, h) : fun(a)(b)(c)(d)(e)(f)(g)(h);
  }
  function A9(fun, a, b, c, d, e, f, g, h, i) {
      return fun.a === 9 ? fun.f(a, b, c, d, e, f, g, h, i) : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
  }

  window._elm_lang$core$Native_Core = {
      F2: F2,
      F3: F3,
      F4: F4,
      F5: F5,
      F6: F6,
      F7: F7,
      F8: F8,
      F9: F9,
      A2: A2,
      A3: A3,
      A4: A4,
      A5: A5,
      A6: A6,
      A7: A7,
      A8: A8,
      A9: A9
  };

  window._elm_lang$core$Native_Json = (function() {
      // CORE DECODERS

      function succeed(msg) {
          return {
              ctor: "<decoder>",
              tag: "succeed",
              msg: msg
          };
      }

      function fail(msg) {
          return {
              ctor: "<decoder>",
              tag: "fail",
              msg: msg
          };
      }

      function decodePrimitive(tag) {
          return {
              ctor: "<decoder>",
              tag: tag
          };
      }

      function decodeContainer(tag, decoder) {
          return {
              ctor: "<decoder>",
              tag: tag,
              decoder: decoder
          };
      }

      function decodeNull(value) {
          return {
              ctor: "<decoder>",
              tag: "null",
              value: value
          };
      }

      function decodeField(field, decoder) {
          return {
              ctor: "<decoder>",
              tag: "field",
              field: field,
              decoder: decoder
          };
      }

      function decodeIndex(index, decoder) {
          return {
              ctor: "<decoder>",
              tag: "index",
              index: index,
              decoder: decoder
          };
      }

      function decodeKeyValuePairs(decoder) {
          return {
              ctor: "<decoder>",
              tag: "key-value",
              decoder: decoder
          };
      }

      function mapMany(f, decoders) {
          return {
              ctor: "<decoder>",
              tag: "map-many",
              func: f,
              decoders: decoders
          };
      }

      function andThen(callback, decoder) {
          return {
              ctor: "<decoder>",
              tag: "andThen",
              decoder: decoder,
              callback: callback
          };
      }

      function oneOf(decoders) {
          return {
              ctor: "<decoder>",
              tag: "oneOf",
              decoders: decoders
          };
      }

      // DECODING OBJECTS

      function map1(f, d1) {
          return mapMany(f, [d1]);
      }

      function map2(f, d1, d2) {
          return mapMany(f, [d1, d2]);
      }

      function map3(f, d1, d2, d3) {
          return mapMany(f, [d1, d2, d3]);
      }

      function map4(f, d1, d2, d3, d4) {
          return mapMany(f, [d1, d2, d3, d4]);
      }

      function map5(f, d1, d2, d3, d4, d5) {
          return mapMany(f, [d1, d2, d3, d4, d5]);
      }

      function map6(f, d1, d2, d3, d4, d5, d6) {
          return mapMany(f, [d1, d2, d3, d4, d5, d6]);
      }

      function map7(f, d1, d2, d3, d4, d5, d6, d7) {
          return mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
      }

      function map8(f, d1, d2, d3, d4, d5, d6, d7, d8) {
          return mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
      }

      // DECODE HELPERS

      function ok(value) {
          return { tag: "ok", value: value };
      }

      function badPrimitive(type, value) {
          return { tag: "primitive", type: type, value: value };
      }

      function badIndex(index, nestedProblems) {
          return { tag: "index", index: index, rest: nestedProblems };
      }

      function badField(field, nestedProblems) {
          return { tag: "field", field: field, rest: nestedProblems };
      }

      function badIndex(index, nestedProblems) {
          return { tag: "index", index: index, rest: nestedProblems };
      }

      function badOneOf(problems) {
          return { tag: "oneOf", problems: problems };
      }

      function bad(msg) {
          return { tag: "fail", msg: msg };
      }

      function badToString(problem) {
          var context = "_";
          while (problem) {
              switch (problem.tag) {
                  case "primitive":
                      return (
                          "Expecting " +
                          problem.type +
                          (context === "_" ? "" : " at " + context) +
                          " but instead got: " +
                          jsToString(problem.value)
                      );

                  case "index":
                      context += "[" + problem.index + "]";
                      problem = problem.rest;
                      break;

                  case "field":
                      context += "." + problem.field;
                      problem = problem.rest;
                      break;

                  case "index":
                      context += "[" + problem.index + "]";
                      problem = problem.rest;
                      break;

                  case "oneOf":
                      var problems = problem.problems;
                      for (var i = 0; i < problems.length; i++) {
                          problems[i] = badToString(problems[i]);
                      }
                      return (
                          "I ran into the following problems" +
                          (context === "_" ? "" : " at " + context) +
                          ":\n\n" +
                          problems.join("\n")
                      );

                  case "fail":
                      return (
                          "I ran into a `fail` decoder" +
                          (context === "_" ? "" : " at " + context) +
                          ": " +
                          problem.msg
                      );
              }
          }
      }

      function jsToString(value) {
          return value === undefined ? "undefined" : JSON.stringify(value);
      }

      // DECODE

      function runOnString(decoder, string) {
          var json;
          try {
              json = JSON.parse(string);
          } catch (e) {
              return _elm_lang$core$Result$Err("Given an invalid JSON: " + e.message);
          }
          return run(decoder, json);
      }

      function _elm_lang$core$Result$Err(a) {
          return { ctor: "Err", value0: a };
      }

      function _elm_lang$core$Result$Ok(a) {
          return { ctor: "Ok", value0: a };
      }

      function run(decoder, value) {
          var result = runHelp(decoder, value);
          return result.tag === "ok"
              ? _elm_lang$core$Result$Ok(result.value)
              : _elm_lang$core$Result$Err(badToString(result));
      }

      function runHelp(decoder, value) {
          switch (decoder.tag) {
              case "bool":
                  return typeof value === "boolean" ? ok(value) : badPrimitive("a Bool", value);

              case "int":
                  if (typeof value !== "number") {
                      return badPrimitive("an Int", value);
                  }

                  if (-2147483647 < value && value < 2147483647 && (value | 0) === value) {
                      return ok(value);
                  }

                  if (isFinite(value) && !(value % 1)) {
                      return ok(value);
                  }

                  return badPrimitive("an Int", value);

              case "float":
                  return typeof value === "number" ? ok(value) : badPrimitive("a Float", value);

              case "string":
                  return typeof value === "string"
                      ? ok(value)
                      : value instanceof String ? ok(value + "") : badPrimitive("a String", value);

              case "null":
                  return value === null ? ok(decoder.value) : badPrimitive("null", value);

              case "value":
                  return ok(value);

              case "list":
                  if (!(value instanceof Array)) {
                      return badPrimitive("a List", value);
                  }

                  var list = _elm_lang$core$Native_List.Nil;
                  for (var i = value.length; i--; ) {
                      var result = runHelp(decoder.decoder, value[i]);
                      if (result.tag !== "ok") {
                          return badIndex(i, result);
                      }
                      list = _elm_lang$core$Native_List.Cons(result.value, list);
                  }
                  return ok(list);

              case "array":
                  if (!(value instanceof Array)) {
                      return badPrimitive("an Array", value);
                  }

                  var len = value.length;
                  var array = new Array(len);
                  for (var i = len; i--; ) {
                      var result = runHelp(decoder.decoder, value[i]);
                      if (result.tag !== "ok") {
                          return badIndex(i, result);
                      }
                      array[i] = result.value;
                  }
                  return ok(_elm_lang$core$Native_Array.fromJSArray(array));

              case "maybe":
                  var result = runHelp(decoder.decoder, value);
                  return result.tag === "ok"
                      ? ok(_elm_lang$core$Maybe$Just(result.value))
                      : ok(_elm_lang$core$Maybe$Nothing);

              case "field":
                  var field = decoder.field;
                  if (typeof value !== "object" || value === null || !(field in value)) {
                      return badPrimitive("an object with a field named `" + field + "`", value);
                  }

                  var result = runHelp(decoder.decoder, value[field]);
                  return result.tag === "ok" ? result : badField(field, result);

              case "index":
                  var index = decoder.index;
                  if (!(value instanceof Array)) {
                      return badPrimitive("an array", value);
                  }
                  if (index >= value.length) {
                      return badPrimitive(
                          "a longer array. Need index " +
                              index +
                              " but there are only " +
                              value.length +
                              " entries",
                          value
                      );
                  }

                  var result = runHelp(decoder.decoder, value[index]);
                  return result.tag === "ok" ? result : badIndex(index, result);

              case "key-value":
                  if (typeof value !== "object" || value === null || value instanceof Array) {
                      return badPrimitive("an object", value);
                  }

                  var keyValuePairs = _elm_lang$core$Native_List.Nil;
                  for (var key in value) {
                      var result = runHelp(decoder.decoder, value[key]);
                      if (result.tag !== "ok") {
                          return badField(key, result);
                      }
                      var pair = _elm_lang$core$Native_Utils.Tuple2(key, result.value);
                      keyValuePairs = _elm_lang$core$Native_List.Cons(pair, keyValuePairs);
                  }
                  return ok(keyValuePairs);

              case "map-many":
                  var answer = decoder.func;
                  var decoders = decoder.decoders;
                  for (var i = 0; i < decoders.length; i++) {
                      var result = runHelp(decoders[i], value);
                      if (result.tag !== "ok") {
                          return result;
                      }
                      answer = answer(result.value);
                  }
                  return ok(answer);

              case "andThen":
                  var result = runHelp(decoder.decoder, value);
                  return result.tag !== "ok"
                      ? result
                      : runHelp(decoder.callback(result.value), value);

              case "oneOf":
                  var errors = [];
                  var temp = decoder.decoders;
                  while (temp.ctor !== "[]") {
                      var result = runHelp(temp.value0, value);

                      if (result.tag === "ok") {
                          return result;
                      }

                      errors.push(result);

                      temp = temp.value1;
                  }
                  return badOneOf(errors);

              case "fail":
                  return bad(decoder.msg);

              case "succeed":
                  return ok(decoder.msg);
          }
      }

      // EQUALITY

      function equality(a, b) {
          if (a === b) {
              return true;
          }

          if (a.tag !== b.tag) {
              return false;
          }

          switch (a.tag) {
              case "succeed":
              case "fail":
                  return a.msg === b.msg;

              case "bool":
              case "int":
              case "float":
              case "string":
              case "value":
                  return true;

              case "null":
                  return a.value === b.value;

              case "list":
              case "array":
              case "maybe":
              case "key-value":
                  return equality(a.decoder, b.decoder);

              case "field":
                  return a.field === b.field && equality(a.decoder, b.decoder);

              case "index":
                  return a.index === b.index && equality(a.decoder, b.decoder);

              case "map-many":
                  if (a.func !== b.func) {
                      return false;
                  }
                  return listEquality(a.decoders, b.decoders);

              case "andThen":
                  return a.callback === b.callback && equality(a.decoder, b.decoder);

              case "oneOf":
                  return listEquality(a.decoders, b.decoders);
          }
      }

      function listEquality(aDecoders, bDecoders) {
          var len = aDecoders.length;
          if (len !== bDecoders.length) {
              return false;
          }
          for (var i = 0; i < len; i++) {
              if (!equality(aDecoders[i], bDecoders[i])) {
                  return false;
              }
          }
          return true;
      }

      // ENCODE

      function encode(indentLevel, value) {
          return JSON.stringify(value, null, indentLevel);
      }

      function identity(value) {
          return value;
      }

      function encodeObject(keyValuePairs) {
          var obj = {};
          while (keyValuePairs.ctor !== "[]") {
              var pair = keyValuePairs.value0;
              obj[pair.value0] = pair.value1;
              keyValuePairs = keyValuePairs.value1;
          }
          return obj;
      }

      return {
          encode: F2(encode),
          runOnString: F2(runOnString),
          run: F2(run),

          decodeNull: decodeNull,
          decodePrimitive: decodePrimitive,
          decodeContainer: F2(decodeContainer),

          decodeField: F2(decodeField),
          decodeIndex: F2(decodeIndex),

          map1: F2(map1),
          map2: F3(map2),
          map3: F4(map3),
          map4: F5(map4),
          map5: F6(map5),
          map6: F7(map6),
          map7: F8(map7),
          map8: F9(map8),
          decodeKeyValuePairs: decodeKeyValuePairs,

          andThen: F2(andThen),
          fail: fail,
          succeed: succeed,
          oneOf: oneOf,

          identity: identity,
          encodeNull: null,
          // encodeArray: _elm_lang$core$Native_Array.toJSArray,
          // encodeList: _elm_lang$core$Native_List.toArray,
          encodeObject: encodeObject,

          equality: equality
      };
  })();

  var json = window._elm_lang$core$Native_Json;
  exports.succeed = json.succeed;

  exports.identity = json.identity;
})(PS["Elm.Native.Json"] = PS["Elm.Native.Json"] || {});
(function(exports) {
    "use strict";
  var $foreign = PS["Elm.Native.Json"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_Tuple = PS["Data.Tuple"];
  exports["succeed"] = $foreign.succeed;
  exports["identity"] = $foreign.identity;
})(PS["Elm.Native.Json"] = PS["Elm.Native.Json"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_List = PS["Data.List"];
  var Data_Tuple = PS["Data.Tuple"];
  var Elm_Native_Json = PS["Elm.Native.Json"];        
  var string = Elm_Native_Json.identity;
  exports["string"] = string;
})(PS["Elm.Json.Encode"] = PS["Elm.Json.Encode"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Foldable = PS["Data.Foldable"];
  var Elm_Json_Encode = PS["Elm.Json.Encode"];
  var Elm_Native_Json = PS["Elm.Native.Json"];        
  var succeed = Elm_Native_Json.succeed;
  exports["succeed"] = succeed;
})(PS["Elm.Json.Decode"] = PS["Elm.Json.Decode"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Elm.Native.VirtualDom"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_Tuple = PS["Data.Tuple"];
  var Elm_Json_Decode = PS["Elm.Json.Decode"];
  var Elm_Json_Encode = PS["Elm.Json.Encode"];
  var Prelude = PS["Prelude"];
  var node = function (s) {
      return function (p) {
          return function (c) {
              return $foreign.node_(s)(Data_List.fromFoldable(Data_Foldable.foldableArray)(p))(Data_List.fromFoldable(Data_Foldable.foldableArray)(c));
          };
      };
  };                                                           
  var defaultOptions = {
      stopPropagation: false,
      preventDefault: false
  };
  var on = function (eventName) {
      return function (decoder) {
          return $foreign.onWithOptions(eventName)(defaultOptions)(decoder);
      };
  };
  exports["node"] = node;
  exports["on"] = on;
  exports["defaultOptions"] = defaultOptions;
  exports["normalRenderer"] = $foreign.normalRenderer;
  exports["text"] = $foreign.text;
  exports["property"] = $foreign.property;
  exports["style"] = $foreign.style;
})(PS["Elm.Native.VirtualDom"] = PS["Elm.Native.VirtualDom"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Elm.Native.Platform"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Tuple = PS["Data.Tuple"];
  var Elm_Async = PS["Elm.Async"];
  var Elm_Native_Scheduler = PS["Elm.Native.Scheduler"];
  var Elm_Native_VirtualDom = PS["Elm.Native.VirtualDom"];
  var Prelude = PS["Prelude"];
  exports["program"] = $foreign.program;
})(PS["Elm.Native.Platform"] = PS["Elm.Native.Platform"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Tuple = PS["Data.Tuple"];
  var Elm_Async = PS["Elm.Async"];
  var Elm_Native_Platform = PS["Elm.Native.Platform"];
  var Elm_Native_Scheduler = PS["Elm.Native.Scheduler"];
  var Elm_Native_VirtualDom = PS["Elm.Native.VirtualDom"];
  var Elm_Operators = PS["Elm.Operators"];
  var Prelude = PS["Prelude"];        
  var text = Elm_Native_VirtualDom.text;
  var program = function (v) {
      return Elm_Native_Platform.program(Elm_Native_Scheduler.scheduler)(Elm_Native_VirtualDom.normalRenderer)(v.init)(v.update)(v.view);
  };
  var node = Elm_Native_VirtualDom.node;
  var div = node("div");
  exports["text"] = text;
  exports["node"] = node;
  exports["program"] = program;
  exports["div"] = div;
})(PS["Elm.Html"] = PS["Elm.Html"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Array = PS["Data.Array"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Pipe = PS["Data.Function.Pipe"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];
  var Elm_Html = PS["Elm.Html"];
  var Elm_Json_Encode = PS["Elm.Json.Encode"];
  var Elm_Native_VirtualDom = PS["Elm.Native.VirtualDom"];
  var Prelude = PS["Prelude"];        
  var style = function (l) {
      return Elm_Native_VirtualDom.style(Data_List.fromFoldable(Data_Foldable.foldableArray)(l));
  };
  var property = Elm_Native_VirtualDom.property;
  var stringProperty = function (name_) {
      return function (string) {
          return property(name_)(Elm_Json_Encode.string(string));
      };
  };
  var id = function (name_) {
      return stringProperty("id")(name_);
  };
  exports["style"] = style;
  exports["property"] = property;
  exports["id"] = id;
})(PS["Elm.Html.Attributes"] = PS["Elm.Html.Attributes"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Functor = PS["Data.Functor"];
  var Elm_Html = PS["Elm.Html"];
  var Elm_Json_Decode = PS["Elm.Json.Decode"];
  var Elm_Native_Json = PS["Elm.Native.Json"];
  var Elm_Native_VirtualDom = PS["Elm.Native.VirtualDom"];
  var Prelude = PS["Prelude"];                            
  var on = Elm_Native_VirtualDom.on;
  var onClick = function (msg) {
      return on("click")(Elm_Json_Decode.succeed(msg));
  };
  exports["onClick"] = onClick;
  exports["on"] = on;
})(PS["Elm.Html.Events"] = PS["Elm.Html.Events"] || {});
(function(exports) {exports.repeat = function repeat(callback) {
      var number = 0;
      return function() {
          setInterval(function() {
              console.log("Calling again");
              callback(number++);
          }, 1000);
      };
  };
})(PS["Main"] = PS["Main"] || {});
(function(exports) {
  /* global exports */
  /* global XMLHttpRequest */
  /* global module */
  /* global process */
  "use strict";

  exports._ajax = function () {
    var platformSpecific = { };
    if (typeof module !== "undefined" && module.require && !(typeof process !== "undefined" && process.versions["electron"])) {
      // We are on node.js
      platformSpecific.newXHR = function () {
        var XHR = module.require("xhr2");
        return new XHR();
      };

      platformSpecific.fixupUrl = function (url) {
        var urllib = module.require("url");
        var u = urllib.parse(url);
        u.protocol = u.protocol || "http:";
        u.hostname = u.hostname || "localhost";
        return urllib.format(u);
      };

      platformSpecific.getResponse = function (xhr) {
        return xhr.response;
      };
    } else {
      // We are in the browser
      platformSpecific.newXHR = function () {
        return new XMLHttpRequest();
      };

      platformSpecific.fixupUrl = function (url) {
        return url || "/";
      };

      platformSpecific.getResponse = function (xhr) {
        return xhr.response;
      };
    }

    return function (mkHeader, options) {
      return function (errback, callback) {
        var xhr = platformSpecific.newXHR();
        var fixedUrl = platformSpecific.fixupUrl(options.url);
        xhr.open(options.method || "GET", fixedUrl, true, options.username, options.password);
        if (options.headers) {
          try {
            for (var i = 0, header; (header = options.headers[i]) != null; i++) {
              xhr.setRequestHeader(header.field, header.value);
            }
          } catch (e) {
            errback(e);
          }
        }
        xhr.onerror = function () {
          errback(new Error("AJAX request failed: " + options.method + " " + options.url));
        };
        xhr.onload = function () {
          callback({
            status: xhr.status,
            headers: xhr.getAllResponseHeaders().split("\r\n")
              .filter(function (header) {
                return header.length > 0;
              })
              .map(function (header) {
                var i = header.indexOf(":");
                return mkHeader(header.substring(0, i))(header.substring(i + 2));
              }),
            response: platformSpecific.getResponse(xhr)
          });
        };
        xhr.responseType = options.responseType;
        xhr.withCredentials = options.withCredentials;
        xhr.send(options.content);

        return function (/* error */) {
          return function (cancelErrback, cancelCallback) {
            try {
              xhr.abort();
            } catch (e) {
              return cancelErrback(e);
            }
            return cancelCallback();
          };
        };
      };
    };
  }();
})(PS["Network.HTTP.Affjax"] = PS["Network.HTTP.Affjax"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM_File_Types = PS["DOM.File.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var DOM_XHR_Types = PS["DOM.XHR.Types"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_FormURLEncoded = PS["Data.FormURLEncoded"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_MediaType = PS["Data.MediaType"];
  var Data_MediaType_Common = PS["Data.MediaType.Common"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var Requestable = function (toRequest) {
      this.toRequest = toRequest;
  };
  var toRequest = function (dict) {
      return dict.toRequest;
  }; 
  var defaultToRequest = function ($0) {
      return Data_Tuple.Tuple.create(Data_Maybe.Nothing.value)($0);
  };                                                                   
  var requestableUnit = new Requestable(defaultToRequest);
  exports["Requestable"] = Requestable;
  exports["toRequest"] = toRequest;
  exports["requestableUnit"] = requestableUnit;
})(PS["Network.HTTP.Affjax.Request"] = PS["Network.HTTP.Affjax.Request"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM_File_Types = PS["DOM.File.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_MediaType = PS["Data.MediaType"];
  var Data_MediaType_Common = PS["Data.MediaType.Common"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var ArrayBufferResponse = (function () {
      function ArrayBufferResponse() {

      };
      ArrayBufferResponse.value = new ArrayBufferResponse();
      return ArrayBufferResponse;
  })();
  var BlobResponse = (function () {
      function BlobResponse() {

      };
      BlobResponse.value = new BlobResponse();
      return BlobResponse;
  })();
  var DocumentResponse = (function () {
      function DocumentResponse() {

      };
      DocumentResponse.value = new DocumentResponse();
      return DocumentResponse;
  })();
  var JSONResponse = (function () {
      function JSONResponse() {

      };
      JSONResponse.value = new JSONResponse();
      return JSONResponse;
  })();
  var StringResponse = (function () {
      function StringResponse() {

      };
      StringResponse.value = new StringResponse();
      return StringResponse;
  })();
  var Respondable = function (fromResponse, responseType) {
      this.fromResponse = fromResponse;
      this.responseType = responseType;
  }; 
  var responseTypeToString = function (v) {
      if (v instanceof ArrayBufferResponse) {
          return "arraybuffer";
      };
      if (v instanceof BlobResponse) {
          return "blob";
      };
      if (v instanceof DocumentResponse) {
          return "document";
      };
      if (v instanceof JSONResponse) {
          return "text";
      };
      if (v instanceof StringResponse) {
          return "text";
      };
      throw new Error("Failed pattern match at Network.HTTP.Affjax.Response line 48, column 1 - line 48, column 61: " + [ v.constructor.name ]);
  };
  var responseType = function (dict) {
      return dict.responseType;
  };                                                                                                                                                                                                                                                        
  var responsableString = new Respondable(Data_Foreign.readString, new Data_Tuple.Tuple(Data_Maybe.Nothing.value, StringResponse.value));                               
  var fromResponse = function (dict) {
      return dict.fromResponse;
  };
  exports["ArrayBufferResponse"] = ArrayBufferResponse;
  exports["BlobResponse"] = BlobResponse;
  exports["DocumentResponse"] = DocumentResponse;
  exports["JSONResponse"] = JSONResponse;
  exports["StringResponse"] = StringResponse;
  exports["responseTypeToString"] = responseTypeToString;
  exports["Respondable"] = Respondable;
  exports["responseType"] = responseType;
  exports["fromResponse"] = fromResponse;
  exports["responsableString"] = responsableString;
})(PS["Network.HTTP.Affjax.Response"] = PS["Network.HTTP.Affjax.Response"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_MediaType = PS["Data.MediaType"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Accept = (function () {
      function Accept(value0) {
          this.value0 = value0;
      };
      Accept.create = function (value0) {
          return new Accept(value0);
      };
      return Accept;
  })();
  var ContentType = (function () {
      function ContentType(value0) {
          this.value0 = value0;
      };
      ContentType.create = function (value0) {
          return new ContentType(value0);
      };
      return ContentType;
  })();
  var RequestHeader = (function () {
      function RequestHeader(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      RequestHeader.create = function (value0) {
          return function (value1) {
              return new RequestHeader(value0, value1);
          };
      };
      return RequestHeader;
  })();
  var requestHeaderValue = function (v) {
      if (v instanceof Accept) {
          return Data_Newtype.unwrap(Data_MediaType.newtypeMediaType)(v.value0);
      };
      if (v instanceof ContentType) {
          return Data_Newtype.unwrap(Data_MediaType.newtypeMediaType)(v.value0);
      };
      if (v instanceof RequestHeader) {
          return v.value1;
      };
      throw new Error("Failed pattern match at Network.HTTP.RequestHeader line 29, column 1 - line 29, column 46: " + [ v.constructor.name ]);
  };
  var requestHeaderName = function (v) {
      if (v instanceof Accept) {
          return "Accept";
      };
      if (v instanceof ContentType) {
          return "Content-Type";
      };
      if (v instanceof RequestHeader) {
          return v.value0;
      };
      throw new Error("Failed pattern match at Network.HTTP.RequestHeader line 24, column 1 - line 24, column 45: " + [ v.constructor.name ]);
  };
  exports["Accept"] = Accept;
  exports["ContentType"] = ContentType;
  exports["RequestHeader"] = RequestHeader;
  exports["requestHeaderName"] = requestHeaderName;
  exports["requestHeaderValue"] = requestHeaderValue;
})(PS["Network.HTTP.RequestHeader"] = PS["Network.HTTP.RequestHeader"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Generic = PS["Data.Generic"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var ResponseHeader = (function () {
      function ResponseHeader(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ResponseHeader.create = function (value0) {
          return function (value1) {
              return new ResponseHeader(value0, value1);
          };
      };
      return ResponseHeader;
  })();
  var responseHeader = function (field) {
      return function (value) {
          return new ResponseHeader(field, value);
      };
  };
  exports["responseHeader"] = responseHeader;
})(PS["Network.HTTP.ResponseHeader"] = PS["Network.HTTP.ResponseHeader"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Network.HTTP.Affjax"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Aff_Compat = PS["Control.Monad.Aff.Compat"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Parallel = PS["Control.Parallel"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Argonaut_Parser = PS["Data.Argonaut.Parser"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HTTP_Method = PS["Data.HTTP.Method"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Int = PS["Data.Int"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_MediaType = PS["Data.MediaType"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Data_Tuple = PS["Data.Tuple"];
  var $$Math = PS["Math"];
  var Network_HTTP_Affjax_Request = PS["Network.HTTP.Affjax.Request"];
  var Network_HTTP_Affjax_Response = PS["Network.HTTP.Affjax.Response"];
  var Network_HTTP_RequestHeader = PS["Network.HTTP.RequestHeader"];
  var Network_HTTP_ResponseHeader = PS["Network.HTTP.ResponseHeader"];
  var Network_HTTP_StatusCode = PS["Network.HTTP.StatusCode"];
  var Prelude = PS["Prelude"];
  var defaultRequest = {
      method: new Data_Either.Left(Data_HTTP_Method.GET.value),
      url: "/",
      headers: [  ],
      content: Data_Maybe.Nothing.value,
      username: Data_Maybe.Nothing.value,
      password: Data_Maybe.Nothing.value,
      withCredentials: false
  };
  var affjax = function (dictRequestable) {
      return function (dictRespondable) {
          return function (req) {
              var responseSettings = Network_HTTP_Affjax_Response.responseType(dictRespondable);
              var requestSettings = (function () {
                  var v = Data_Functor.map(Data_Maybe.functorMaybe)(Network_HTTP_Affjax_Request.toRequest(dictRequestable))(req.content);
                  if (v instanceof Data_Maybe.Nothing) {
                      return new Data_Tuple.Tuple(Data_Maybe.Nothing.value, Data_Maybe.Nothing.value);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return new Data_Tuple.Tuple(v.value0.value0, new Data_Maybe.Just(v.value0.value1));
                  };
                  throw new Error("Failed pattern match at Network.HTTP.Affjax line 250, column 21 - line 252, column 49: " + [ v.constructor.name ]);
              })();
              var parseJSON = function ($98) {
                  return Data_Either.either(function ($99) {
                      return Data_Foreign.fail(Data_Foreign.JSONError.create($99));
                  })(function ($100) {
                      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Foreign.toForeign($100));
                  })(Data_Argonaut_Parser.jsonParser($98));
              };
              var fromResponse$prime = (function () {
                  var v = Data_Tuple.snd(responseSettings);
                  if (v instanceof Network_HTTP_Affjax_Response.JSONResponse) {
                      return Control_Bind.composeKleisliFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Network_HTTP_Affjax_Response.fromResponse(dictRespondable))(Control_Bind.composeKleisliFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(parseJSON)(Data_Foreign.readString));
                  };
                  return Network_HTTP_Affjax_Response.fromResponse(dictRespondable);
              })();
              var addHeader = function (mh) {
                  return function (hs) {
                      if (mh instanceof Data_Maybe.Just && !Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Function.on(Data_Eq.eq(Data_Eq.eqString))(Network_HTTP_RequestHeader.requestHeaderName)(mh.value0))(hs)) {
                          return Data_Array.snoc(hs)(mh.value0);
                      };
                      return hs;
                  };
              };
              var headers = addHeader(Data_Functor.map(Data_Maybe.functorMaybe)(Network_HTTP_RequestHeader.ContentType.create)(Data_Tuple.fst(requestSettings)))(addHeader(Data_Functor.map(Data_Maybe.functorMaybe)(Network_HTTP_RequestHeader.Accept.create)(Data_Tuple.fst(responseSettings)))(req.headers));
              var req$prime = {
                  method: Data_HTTP_Method.print(req.method),
                  url: req.url,
                  headers: Data_Functor.map(Data_Functor.functorArray)(function (h) {
                      return {
                          field: Network_HTTP_RequestHeader.requestHeaderName(h),
                          value: Network_HTTP_RequestHeader.requestHeaderValue(h)
                      };
                  })(headers),
                  content: Data_Nullable.toNullable(Data_Tuple.snd(requestSettings)),
                  responseType: Network_HTTP_Affjax_Response.responseTypeToString(Data_Tuple.snd(responseSettings)),
                  username: Data_Nullable.toNullable(req.username),
                  password: Data_Nullable.toNullable(req.password),
                  withCredentials: req.withCredentials
              };
              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_Compat.fromEffFnAff($foreign._ajax(Network_HTTP_ResponseHeader.responseHeader, req$prime)))(function (v) {
                  var v1 = Data_Functor.map(Data_Either.functorEither)(function (v2) {
                      var $68 = {};
                      for (var $69 in v) {
                          if ({}.hasOwnProperty.call(v, $69)) {
                              $68[$69] = v[$69];
                          };
                      };
                      $68.response = v2;
                      return $68;
                  })(Control_Monad_Except.runExcept(fromResponse$prime(v.response)));
                  if (v1 instanceof Data_Either.Left) {
                      return Control_Monad_Error_Class.throwError(Control_Monad_Aff.monadThrowAff)(Control_Monad_Eff_Exception.error(Data_Show.show(Data_List_Types.showNonEmptyList(Data_Foreign.showForeignError))(v1.value0)));
                  };
                  if (v1 instanceof Data_Either.Right) {
                      return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v1.value0);
                  };
                  throw new Error("Failed pattern match at Network.HTTP.Affjax line 232, column 3 - line 234, column 28: " + [ v1.constructor.name ]);
              });
          };
      };
  };                                                                   
  var get = function (dictRespondable) {
      return function (u) {
          return affjax(Network_HTTP_Affjax_Request.requestableUnit)(dictRespondable)((function () {
              var $77 = {};
              for (var $78 in defaultRequest) {
                  if ({}.hasOwnProperty.call(defaultRequest, $78)) {
                      $77[$78] = defaultRequest[$78];
                  };
              };
              $77.url = u;
              return $77;
          })());
      };
  };
  exports["defaultRequest"] = defaultRequest;
  exports["affjax"] = affjax;
  exports["get"] = get;
})(PS["Network.HTTP.Affjax"] = PS["Network.HTTP.Affjax"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Main"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Aff_Class = PS["Control.Monad.Aff.Class"];
  var Control_Monad_Cont_Trans = PS["Control.Monad.Cont.Trans"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];
  var Elm_Async = PS["Elm.Async"];
  var Elm_Html = PS["Elm.Html"];
  var Elm_Html_Attributes = PS["Elm.Html.Attributes"];
  var Elm_Html_Events = PS["Elm.Html.Events"];
  var Elm_Operators = PS["Elm.Operators"];
  var Network_HTTP_Affjax = PS["Network.HTTP.Affjax"];
  var Network_HTTP_Affjax_Response = PS["Network.HTTP.Affjax.Response"];
  var Prelude = PS["Prelude"];        
  var Clicked = (function () {
      function Clicked() {

      };
      Clicked.value = new Clicked();
      return Clicked;
  })();
  var DoNothing = (function () {
      function DoNothing() {

      };
      DoNothing.value = new DoNothing();
      return DoNothing;
  })();
  var LogSomething = (function () {
      function LogSomething() {

      };
      LogSomething.value = new LogSomething();
      return LogSomething;
  })();
  var LogNumber = (function () {
      function LogNumber(value0) {
          this.value0 = value0;
      };
      LogNumber.create = function (value0) {
          return new LogNumber(value0);
      };
      return LogNumber;
  })();
  var view = function (model) {
      return Elm_Html.div([ Elm_Html_Attributes.id("greeting"), Elm_Html_Events.onClick(Clicked.value), Elm_Html_Attributes.style([ new Data_Tuple.Tuple("color", "blue") ]) ])([ Elm_Html.text(model) ]);
  };
  var init = new Data_Tuple.Tuple("This goes on", [ Control_Monad_Eff_Class.liftEff(Control_Monad_Cont_Trans.monadEffContT(Control_Monad_Eff_Class.monadEffEff))(Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](DoNothing.value))(Control_Monad_Eff_Console.log("Initiated!"))) ]);
  var getGoogleText = Control_Bind.bind(Control_Monad_Aff.bindAff)(Network_HTTP_Affjax.get(Network_HTTP_Affjax_Response.responsableString)("http://google.com"))(function (v) {
      return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v.response);
  });
  var update = function (msg) {
      return function (model) {
          if (msg instanceof DoNothing) {
              return new Data_Tuple.Tuple(model, Data_Monoid.mempty(Data_Monoid.monoidArray));
          };
          if (msg instanceof LogSomething) {
              return new Data_Tuple.Tuple(model, [ Control_Bind.bind(Control_Monad_Cont_Trans.bindContT(Control_Monad_Eff.bindEff))(Elm_Async.fromAff(getGoogleText))(function (v) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Cont_Trans.bindContT(Control_Monad_Eff.bindEff))(Control_Monad_Eff_Class.liftEff(Control_Monad_Cont_Trans.monadEffContT(Control_Monad_Eff_Class.monadEffEff))(Control_Monad_Eff_Console.log("Just after request")))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Cont_Trans.bindContT(Control_Monad_Eff.bindEff))((function () {
                          if (v instanceof Data_Either.Right) {
                              return Control_Monad_Eff_Class.liftEff(Control_Monad_Cont_Trans.monadEffContT(Control_Monad_Eff_Class.monadEffEff))(Control_Monad_Eff_Console.log(v.value0));
                          };
                          if (v instanceof Data_Either.Left) {
                              return Control_Monad_Eff_Class.liftEff(Control_Monad_Cont_Trans.monadEffContT(Control_Monad_Eff_Class.monadEffEff))(function __do() {
                                  var v1 = Control_Monad_Eff_Console.log("Error")();
                                  return Control_Monad_Eff_Console.logShow(Control_Monad_Eff_Exception.showError)(v.value0)();
                              });
                          };
                          throw new Error("Failed pattern match at Main line 55, column 41 - line 57, column 104: " + [ v.constructor.name ]);
                      })())(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Cont_Trans.bindContT(Control_Monad_Eff.bindEff))(Control_Monad_Eff_Class.liftEff(Control_Monad_Cont_Trans.monadEffContT(Control_Monad_Eff_Class.monadEffEff))(Control_Monad_Eff_Console.log("After response handling")))(function () {
                              return Control_Applicative.pure(Control_Monad_Cont_Trans.applicativeContT(Control_Monad_Eff.applicativeEff))(DoNothing.value);
                          });
                      });
                  });
              }) ]);
          };
          if (msg instanceof Clicked) {
              return new Data_Tuple.Tuple(model + "and on", [ Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Cont_Trans.bindContT(Control_Monad_Eff.bindEff))(Control_Monad_Eff_Class.liftEff(Control_Monad_Cont_Trans.monadEffContT(Control_Monad_Eff_Class.monadEffEff))(Control_Monad_Eff_Console.log("Clicked!")))(function () {
                  return Control_Bind.bind(Control_Monad_Cont_Trans.bindContT(Control_Monad_Eff.bindEff))(Elm_Async.makeAsync($foreign.repeat))(function (v) {
                      return Control_Applicative.pure(Control_Monad_Cont_Trans.applicativeContT(Control_Monad_Eff.applicativeEff))(new LogNumber(v));
                  });
              }) ]);
          };
          if (msg instanceof LogNumber) {
              return new Data_Tuple.Tuple(model, [ Control_Monad_Eff_Class.liftEff(Control_Monad_Cont_Trans.monadEffContT(Control_Monad_Eff_Class.monadEffEff))(Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](DoNothing.value))(Control_Monad_Eff_Console.logShow(Data_Show.showInt)(msg.value0))) ]);
          };
          throw new Error("Failed pattern match at Main line 46, column 9 - line 70, column 81: " + [ msg.constructor.name ]);
      };
  };
  var main = Elm_Html.program({
      init: init,
      update: update,
      view: view
  });
  exports["main"] = main;
  exports["Clicked"] = Clicked;
  exports["DoNothing"] = DoNothing;
  exports["LogSomething"] = LogSomething;
  exports["LogNumber"] = LogNumber;
  exports["init"] = init;
  exports["update"] = update;
  exports["getGoogleText"] = getGoogleText;
  exports["view"] = view;
  exports["repeat"] = $foreign.repeat;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();
